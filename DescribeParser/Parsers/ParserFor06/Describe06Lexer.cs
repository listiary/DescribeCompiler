//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe06.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe06Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PROTO_SLASHES=1, LINE_COMMENT=2, BLOCK_COMMENT=3, HYPHEN=4, RIGHT_ARROW=5, 
		SEPARATOR=6, TERMINATOR=7, COLON=8, FORWARD_SLASH=9, STAR=10, ESCAPE_ESCAPE=11, 
		ESCAPE_HYPHEN=12, ESCAPE_RIGHT_ARROW=13, ESCAPE_SEPARATOR=14, ESCAPE_TERMINATOR=15, 
		ESCAPE_COLON=16, ESCAPE_LCOMMENT=17, ESCAPE_BCOMMENT=18, ESCAPE=19, DATA=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WHITESPACE", "LINESPACE", "PROTO_SLASHES", "LINE_COMMENT", "BLOCK_COMMENT", 
		"HYPHEN", "RIGHT_ARROW", "SEPARATOR", "TERMINATOR", "COLON", "FORWARD_SLASH", 
		"STAR", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_COLON", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", 
		"ESCAPE", "DATA_CHAR", "DATA"
	};


	public Describe06Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe06Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'://'", null, null, "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PROTO_SLASHES", "LINE_COMMENT", "BLOCK_COMMENT", "HYPHEN", "RIGHT_ARROW", 
		"SEPARATOR", "TERMINATOR", "COLON", "FORWARD_SLASH", "STAR", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", 
		"ESCAPE_COLON", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe06.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe06Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,234,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,60,
		8,3,10,3,12,3,63,9,3,1,3,3,3,66,8,3,1,3,1,3,5,3,70,8,3,10,3,12,3,73,9,
		3,1,3,3,3,76,8,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,84,8,4,10,4,12,4,87,9,4,1,
		4,1,4,1,4,1,4,5,4,93,8,4,10,4,12,4,96,9,4,1,4,3,4,99,8,4,1,4,1,4,1,5,1,
		5,1,6,1,6,5,6,107,8,6,10,6,12,6,110,9,6,1,7,1,7,5,7,114,8,7,10,7,12,7,
		117,9,7,1,8,1,8,5,8,121,8,8,10,8,12,8,124,9,8,1,9,1,9,5,9,128,8,9,10,9,
		12,9,131,9,9,1,10,1,10,5,10,135,8,10,10,10,12,10,138,9,10,1,11,1,11,5,
		11,142,8,11,10,11,12,11,145,9,11,1,12,1,12,1,12,1,12,5,12,151,8,12,10,
		12,12,12,154,9,12,1,13,1,13,1,13,1,13,5,13,160,8,13,10,13,12,13,163,9,
		13,1,14,1,14,1,14,1,14,5,14,169,8,14,10,14,12,14,172,9,14,1,15,1,15,1,
		15,1,15,5,15,178,8,15,10,15,12,15,181,9,15,1,16,1,16,1,16,1,16,5,16,187,
		8,16,10,16,12,16,190,9,16,1,17,1,17,1,17,1,17,5,17,196,8,17,10,17,12,17,
		199,9,17,1,18,1,18,1,18,1,18,1,18,5,18,206,8,18,10,18,12,18,209,9,18,1,
		19,1,19,1,19,1,19,1,19,5,19,216,8,19,10,19,12,19,219,9,19,1,20,1,20,5,
		20,223,8,20,10,20,12,20,226,9,20,1,21,1,21,1,22,4,22,231,8,22,11,22,12,
		22,232,2,61,85,0,23,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,
		23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,0,45,20,
		1,0,3,11,0,9,9,11,13,32,32,133,133,160,160,5760,5760,8192,8202,8232,8233,
		8239,8239,8287,8287,12288,12288,10,0,9,13,32,32,133,133,160,160,5760,5760,
		8192,8202,8232,8233,8239,8239,8287,8287,12288,12288,6,0,42,42,44,45,47,
		47,58,59,62,62,92,92,253,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
		0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
		23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
		0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,45,1,0,0,0,
		1,47,1,0,0,0,3,49,1,0,0,0,5,51,1,0,0,0,7,55,1,0,0,0,9,79,1,0,0,0,11,102,
		1,0,0,0,13,104,1,0,0,0,15,111,1,0,0,0,17,118,1,0,0,0,19,125,1,0,0,0,21,
		132,1,0,0,0,23,139,1,0,0,0,25,146,1,0,0,0,27,155,1,0,0,0,29,164,1,0,0,
		0,31,173,1,0,0,0,33,182,1,0,0,0,35,191,1,0,0,0,37,200,1,0,0,0,39,210,1,
		0,0,0,41,220,1,0,0,0,43,227,1,0,0,0,45,230,1,0,0,0,47,48,7,0,0,0,48,2,
		1,0,0,0,49,50,7,1,0,0,50,4,1,0,0,0,51,52,5,58,0,0,52,53,5,47,0,0,53,54,
		5,47,0,0,54,6,1,0,0,0,55,56,5,47,0,0,56,57,5,47,0,0,57,61,1,0,0,0,58,60,
		9,0,0,0,59,58,1,0,0,0,60,63,1,0,0,0,61,62,1,0,0,0,61,59,1,0,0,0,62,75,
		1,0,0,0,63,61,1,0,0,0,64,66,5,13,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,67,
		1,0,0,0,67,71,5,10,0,0,68,70,3,3,1,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,
		1,0,0,0,71,72,1,0,0,0,72,76,1,0,0,0,73,71,1,0,0,0,74,76,5,0,0,1,75,65,
		1,0,0,0,75,74,1,0,0,0,76,77,1,0,0,0,77,78,6,3,0,0,78,8,1,0,0,0,79,80,5,
		47,0,0,80,81,5,42,0,0,81,85,1,0,0,0,82,84,9,0,0,0,83,82,1,0,0,0,84,87,
		1,0,0,0,85,86,1,0,0,0,85,83,1,0,0,0,86,98,1,0,0,0,87,85,1,0,0,0,88,89,
		5,42,0,0,89,90,5,47,0,0,90,94,1,0,0,0,91,93,3,3,1,0,92,91,1,0,0,0,93,96,
		1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,99,1,0,0,0,96,94,1,0,0,0,97,99,
		5,0,0,1,98,88,1,0,0,0,98,97,1,0,0,0,99,100,1,0,0,0,100,101,6,4,0,0,101,
		10,1,0,0,0,102,103,5,45,0,0,103,12,1,0,0,0,104,108,5,62,0,0,105,107,3,
		3,1,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,
		109,14,1,0,0,0,110,108,1,0,0,0,111,115,5,44,0,0,112,114,3,3,1,0,113,112,
		1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,16,1,0,0,0,
		117,115,1,0,0,0,118,122,5,59,0,0,119,121,3,3,1,0,120,119,1,0,0,0,121,124,
		1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,18,1,0,0,0,124,122,1,0,0,0,
		125,129,5,58,0,0,126,128,3,3,1,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,
		1,0,0,0,129,130,1,0,0,0,130,20,1,0,0,0,131,129,1,0,0,0,132,136,5,47,0,
		0,133,135,3,3,1,0,134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,
		137,1,0,0,0,137,22,1,0,0,0,138,136,1,0,0,0,139,143,5,42,0,0,140,142,3,
		3,1,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,
		144,24,1,0,0,0,145,143,1,0,0,0,146,147,5,92,0,0,147,148,5,92,0,0,148,152,
		1,0,0,0,149,151,3,3,1,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,
		0,152,153,1,0,0,0,153,26,1,0,0,0,154,152,1,0,0,0,155,156,5,92,0,0,156,
		157,5,45,0,0,157,161,1,0,0,0,158,160,3,3,1,0,159,158,1,0,0,0,160,163,1,
		0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,28,1,0,0,0,163,161,1,0,0,0,164,
		165,5,92,0,0,165,166,5,62,0,0,166,170,1,0,0,0,167,169,3,3,1,0,168,167,
		1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,30,1,0,0,0,
		172,170,1,0,0,0,173,174,5,92,0,0,174,175,5,44,0,0,175,179,1,0,0,0,176,
		178,3,3,1,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,
		0,0,0,180,32,1,0,0,0,181,179,1,0,0,0,182,183,5,92,0,0,183,184,5,59,0,0,
		184,188,1,0,0,0,185,187,3,3,1,0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,
		1,0,0,0,188,189,1,0,0,0,189,34,1,0,0,0,190,188,1,0,0,0,191,192,5,92,0,
		0,192,193,5,58,0,0,193,197,1,0,0,0,194,196,3,3,1,0,195,194,1,0,0,0,196,
		199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,36,1,0,0,0,199,197,1,0,
		0,0,200,201,5,92,0,0,201,202,5,47,0,0,202,203,5,47,0,0,203,207,1,0,0,0,
		204,206,3,3,1,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,
		1,0,0,0,208,38,1,0,0,0,209,207,1,0,0,0,210,211,5,92,0,0,211,212,5,47,0,
		0,212,213,5,42,0,0,213,217,1,0,0,0,214,216,3,3,1,0,215,214,1,0,0,0,216,
		219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,40,1,0,0,0,219,217,1,0,
		0,0,220,224,5,92,0,0,221,223,3,3,1,0,222,221,1,0,0,0,223,226,1,0,0,0,224,
		222,1,0,0,0,224,225,1,0,0,0,225,42,1,0,0,0,226,224,1,0,0,0,227,228,8,2,
		0,0,228,44,1,0,0,0,229,231,3,43,21,0,230,229,1,0,0,0,231,232,1,0,0,0,232,
		230,1,0,0,0,232,233,1,0,0,0,233,46,1,0,0,0,24,0,61,65,71,75,85,94,98,108,
		115,122,129,136,143,152,161,170,179,188,197,207,217,224,232,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
