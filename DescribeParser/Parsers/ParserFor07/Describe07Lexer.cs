//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe07.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe07Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PROTO_SLASHES=1, LINE_COMMENT=2, BLOCK_COMMENT=3, TAG=4, HYPHEN=5, RIGHT_ARROW=6, 
		LEFT_ARROW=7, SEPARATOR=8, TERMINATOR=9, COLON=10, FORWARD_SLASH=11, STAR=12, 
		ESCAPE_ESCAPE=13, ESCAPE_HYPHEN=14, ESCAPE_RIGHT_ARROW=15, ESCAPE_LEFT_ARROW=16, 
		ESCAPE_SEPARATOR=17, ESCAPE_TERMINATOR=18, ESCAPE_COLON=19, ESCAPE_LCOMMENT=20, 
		ESCAPE_BCOMMENT=21, ESCAPE=22, DATA=23;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WHITESPACE", "LINESPACE", "PROTO_SLASHES", "LINE_COMMENT", "BLOCK_COMMENT", 
		"TAG", "HYPHEN", "RIGHT_ARROW", "LEFT_ARROW", "SEPARATOR", "TERMINATOR", 
		"COLON", "FORWARD_SLASH", "STAR", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", 
		"ESCAPE_LEFT_ARROW", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_COLON", 
		"ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA_CHAR", "DATA"
	};


	public Describe07Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe07Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'://'", null, null, null, "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PROTO_SLASHES", "LINE_COMMENT", "BLOCK_COMMENT", "TAG", "HYPHEN", 
		"RIGHT_ARROW", "LEFT_ARROW", "SEPARATOR", "TERMINATOR", "COLON", "FORWARD_SLASH", 
		"STAR", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", 
		"ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_COLON", "ESCAPE_LCOMMENT", 
		"ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe07.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe07Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,23,269,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,1,1,1,1,2,1,2,1,
		2,1,2,1,3,1,3,1,3,1,3,5,3,66,8,3,10,3,12,3,69,9,3,1,3,3,3,72,8,3,1,3,1,
		3,5,3,76,8,3,10,3,12,3,79,9,3,1,3,3,3,82,8,3,1,3,1,3,1,4,1,4,1,4,1,4,5,
		4,90,8,4,10,4,12,4,93,9,4,1,4,1,4,1,4,1,4,5,4,99,8,4,10,4,12,4,102,9,4,
		1,4,3,4,105,8,4,1,4,1,4,1,5,1,5,4,5,111,8,5,11,5,12,5,112,1,5,1,5,5,5,
		117,8,5,10,5,12,5,120,9,5,1,6,1,6,1,7,1,7,5,7,126,8,7,10,7,12,7,129,9,
		7,1,8,1,8,5,8,133,8,8,10,8,12,8,136,9,8,1,9,1,9,5,9,140,8,9,10,9,12,9,
		143,9,9,1,10,1,10,5,10,147,8,10,10,10,12,10,150,9,10,1,11,1,11,5,11,154,
		8,11,10,11,12,11,157,9,11,1,12,1,12,5,12,161,8,12,10,12,12,12,164,9,12,
		1,13,1,13,5,13,168,8,13,10,13,12,13,171,9,13,1,14,1,14,1,14,1,14,5,14,
		177,8,14,10,14,12,14,180,9,14,1,15,1,15,1,15,1,15,5,15,186,8,15,10,15,
		12,15,189,9,15,1,16,1,16,1,16,1,16,5,16,195,8,16,10,16,12,16,198,9,16,
		1,17,1,17,1,17,1,17,5,17,204,8,17,10,17,12,17,207,9,17,1,18,1,18,1,18,
		1,18,5,18,213,8,18,10,18,12,18,216,9,18,1,19,1,19,1,19,1,19,5,19,222,8,
		19,10,19,12,19,225,9,19,1,20,1,20,1,20,1,20,5,20,231,8,20,10,20,12,20,
		234,9,20,1,21,1,21,1,21,1,21,1,21,5,21,241,8,21,10,21,12,21,244,9,21,1,
		22,1,22,1,22,1,22,1,22,5,22,251,8,22,10,22,12,22,254,9,22,1,23,1,23,5,
		23,258,8,23,10,23,12,23,261,9,23,1,24,1,24,1,25,4,25,266,8,25,11,25,12,
		25,267,3,67,91,112,0,26,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,
		9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,
		21,47,22,49,0,51,23,1,0,3,11,0,9,9,11,13,32,32,133,133,160,160,5760,5760,
		8192,8202,8232,8233,8239,8239,8287,8287,12288,12288,10,0,9,13,32,32,133,
		133,160,160,5760,5760,8192,8202,8232,8233,8239,8239,8287,8287,12288,12288,
		6,0,42,42,44,45,47,47,58,60,62,62,92,92,292,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,
		3,55,1,0,0,0,5,57,1,0,0,0,7,61,1,0,0,0,9,85,1,0,0,0,11,108,1,0,0,0,13,
		121,1,0,0,0,15,123,1,0,0,0,17,130,1,0,0,0,19,137,1,0,0,0,21,144,1,0,0,
		0,23,151,1,0,0,0,25,158,1,0,0,0,27,165,1,0,0,0,29,172,1,0,0,0,31,181,1,
		0,0,0,33,190,1,0,0,0,35,199,1,0,0,0,37,208,1,0,0,0,39,217,1,0,0,0,41,226,
		1,0,0,0,43,235,1,0,0,0,45,245,1,0,0,0,47,255,1,0,0,0,49,262,1,0,0,0,51,
		265,1,0,0,0,53,54,7,0,0,0,54,2,1,0,0,0,55,56,7,1,0,0,56,4,1,0,0,0,57,58,
		5,58,0,0,58,59,5,47,0,0,59,60,5,47,0,0,60,6,1,0,0,0,61,62,5,47,0,0,62,
		63,5,47,0,0,63,67,1,0,0,0,64,66,9,0,0,0,65,64,1,0,0,0,66,69,1,0,0,0,67,
		68,1,0,0,0,67,65,1,0,0,0,68,81,1,0,0,0,69,67,1,0,0,0,70,72,5,13,0,0,71,
		70,1,0,0,0,71,72,1,0,0,0,72,73,1,0,0,0,73,77,5,10,0,0,74,76,3,3,1,0,75,
		74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,82,1,0,0,0,79,
		77,1,0,0,0,80,82,5,0,0,1,81,71,1,0,0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,
		84,6,3,0,0,84,8,1,0,0,0,85,86,5,47,0,0,86,87,5,42,0,0,87,91,1,0,0,0,88,
		90,9,0,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,92,1,0,0,0,91,89,1,0,0,0,92,
		104,1,0,0,0,93,91,1,0,0,0,94,95,5,42,0,0,95,96,5,47,0,0,96,100,1,0,0,0,
		97,99,3,3,1,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,
		0,0,101,105,1,0,0,0,102,100,1,0,0,0,103,105,5,0,0,1,104,94,1,0,0,0,104,
		103,1,0,0,0,105,106,1,0,0,0,106,107,6,4,0,0,107,10,1,0,0,0,108,110,5,60,
		0,0,109,111,9,0,0,0,110,109,1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,0,112,
		110,1,0,0,0,113,114,1,0,0,0,114,118,5,62,0,0,115,117,3,3,1,0,116,115,1,
		0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,12,1,0,0,0,120,
		118,1,0,0,0,121,122,5,45,0,0,122,14,1,0,0,0,123,127,5,62,0,0,124,126,3,
		3,1,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,
		128,16,1,0,0,0,129,127,1,0,0,0,130,134,5,60,0,0,131,133,3,3,1,0,132,131,
		1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,18,1,0,0,0,
		136,134,1,0,0,0,137,141,5,44,0,0,138,140,3,3,1,0,139,138,1,0,0,0,140,143,
		1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,20,1,0,0,0,143,141,1,0,0,0,
		144,148,5,59,0,0,145,147,3,3,1,0,146,145,1,0,0,0,147,150,1,0,0,0,148,146,
		1,0,0,0,148,149,1,0,0,0,149,22,1,0,0,0,150,148,1,0,0,0,151,155,5,58,0,
		0,152,154,3,3,1,0,153,152,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,
		156,1,0,0,0,156,24,1,0,0,0,157,155,1,0,0,0,158,162,5,47,0,0,159,161,3,
		3,1,0,160,159,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,
		163,26,1,0,0,0,164,162,1,0,0,0,165,169,5,42,0,0,166,168,3,3,1,0,167,166,
		1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,28,1,0,0,0,
		171,169,1,0,0,0,172,173,5,92,0,0,173,174,5,92,0,0,174,178,1,0,0,0,175,
		177,3,3,1,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,
		0,0,0,179,30,1,0,0,0,180,178,1,0,0,0,181,182,5,92,0,0,182,183,5,45,0,0,
		183,187,1,0,0,0,184,186,3,3,1,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,
		1,0,0,0,187,188,1,0,0,0,188,32,1,0,0,0,189,187,1,0,0,0,190,191,5,92,0,
		0,191,192,5,62,0,0,192,196,1,0,0,0,193,195,3,3,1,0,194,193,1,0,0,0,195,
		198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,34,1,0,0,0,198,196,1,0,
		0,0,199,200,5,92,0,0,200,201,5,60,0,0,201,205,1,0,0,0,202,204,3,3,1,0,
		203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,36,
		1,0,0,0,207,205,1,0,0,0,208,209,5,92,0,0,209,210,5,44,0,0,210,214,1,0,
		0,0,211,213,3,3,1,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,
		215,1,0,0,0,215,38,1,0,0,0,216,214,1,0,0,0,217,218,5,92,0,0,218,219,5,
		59,0,0,219,223,1,0,0,0,220,222,3,3,1,0,221,220,1,0,0,0,222,225,1,0,0,0,
		223,221,1,0,0,0,223,224,1,0,0,0,224,40,1,0,0,0,225,223,1,0,0,0,226,227,
		5,92,0,0,227,228,5,58,0,0,228,232,1,0,0,0,229,231,3,3,1,0,230,229,1,0,
		0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,42,1,0,0,0,234,
		232,1,0,0,0,235,236,5,92,0,0,236,237,5,47,0,0,237,238,5,47,0,0,238,242,
		1,0,0,0,239,241,3,3,1,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,
		0,242,243,1,0,0,0,243,44,1,0,0,0,244,242,1,0,0,0,245,246,5,92,0,0,246,
		247,5,47,0,0,247,248,5,42,0,0,248,252,1,0,0,0,249,251,3,3,1,0,250,249,
		1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,46,1,0,0,0,
		254,252,1,0,0,0,255,259,5,92,0,0,256,258,3,3,1,0,257,256,1,0,0,0,258,261,
		1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,48,1,0,0,0,261,259,1,0,0,0,
		262,263,8,2,0,0,263,50,1,0,0,0,264,266,3,49,24,0,265,264,1,0,0,0,266,267,
		1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,52,1,0,0,0,28,0,67,71,77,81,
		91,100,104,112,118,127,134,141,148,155,162,169,178,187,196,205,214,223,
		232,242,252,259,267,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
