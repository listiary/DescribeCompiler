//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe07.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe07Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, NEWLINE=3, HYPHEN=4, RIGHT_ARROW=5, LEFT_ARROW=6, 
		SEPARATOR=7, TERMINATOR=8, FORWARD_SLASH=9, ESCAPE_ESCAPE=10, ESCAPE_HYPHEN=11, 
		ESCAPE_RIGHT_ARROW=12, ESCAPE_LEFT_ARROW=13, ESCAPE_SEPARATOR=14, ESCAPE_TERMINATOR=15, 
		ESCAPE_LCOMMENT=16, ESCAPE_BCOMMENT=17, ESCAPE=18, DATA=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LINE_COMMENT", "BLOCK_COMMENT", "NEWLINE", "HYPHEN", "RIGHT_ARROW", "LEFT_ARROW", 
		"SEPARATOR", "TERMINATOR", "FORWARD_SLASH", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", 
		"ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", 
		"ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA_CHAR", "DATA"
	};


	public Describe07Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe07Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'-'", null, null, null, null, "'/'", "'\\\\'", 
		"'\\-'", "'\\>'", "'\\<'", "'\\,'", "'\\;'", "'\\//'", "'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "NEWLINE", "HYPHEN", "RIGHT_ARROW", 
		"LEFT_ARROW", "SEPARATOR", "TERMINATOR", "FORWARD_SLASH", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe07.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe07Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,155,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,
		5,0,46,8,0,10,0,12,0,49,9,0,1,0,3,0,52,8,0,1,0,1,0,3,0,56,8,0,1,0,1,0,
		1,1,1,1,1,1,1,1,5,1,64,8,1,10,1,12,1,67,9,1,1,1,1,1,1,1,3,1,72,8,1,1,1,
		1,1,1,2,4,2,77,8,2,11,2,12,2,78,1,2,1,2,4,2,83,8,2,11,2,12,2,84,3,2,87,
		8,2,1,3,1,3,1,4,1,4,5,4,93,8,4,10,4,12,4,96,9,4,1,5,1,5,5,5,100,8,5,10,
		5,12,5,103,9,5,1,6,1,6,5,6,107,8,6,10,6,12,6,110,9,6,1,7,1,7,5,7,114,8,
		7,10,7,12,7,117,9,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,
		1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,
		1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,4,19,152,8,19,11,19,12,19,153,
		2,47,65,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,0,39,19,1,0,2,10,0,9,13,32,32,133,
		133,160,160,5760,5760,8192,8202,8232,8233,8239,8239,8287,8287,12288,12288,
		6,0,42,42,44,45,47,47,59,60,62,62,92,92,166,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,39,1,0,0,
		0,1,41,1,0,0,0,3,59,1,0,0,0,5,86,1,0,0,0,7,88,1,0,0,0,9,90,1,0,0,0,11,
		97,1,0,0,0,13,104,1,0,0,0,15,111,1,0,0,0,17,118,1,0,0,0,19,120,1,0,0,0,
		21,123,1,0,0,0,23,126,1,0,0,0,25,129,1,0,0,0,27,132,1,0,0,0,29,135,1,0,
		0,0,31,138,1,0,0,0,33,142,1,0,0,0,35,146,1,0,0,0,37,148,1,0,0,0,39,151,
		1,0,0,0,41,42,5,47,0,0,42,43,5,47,0,0,43,47,1,0,0,0,44,46,9,0,0,0,45,44,
		1,0,0,0,46,49,1,0,0,0,47,48,1,0,0,0,47,45,1,0,0,0,48,55,1,0,0,0,49,47,
		1,0,0,0,50,52,5,13,0,0,51,50,1,0,0,0,51,52,1,0,0,0,52,53,1,0,0,0,53,56,
		5,10,0,0,54,56,5,0,0,1,55,51,1,0,0,0,55,54,1,0,0,0,56,57,1,0,0,0,57,58,
		6,0,0,0,58,2,1,0,0,0,59,60,5,47,0,0,60,61,5,42,0,0,61,65,1,0,0,0,62,64,
		9,0,0,0,63,62,1,0,0,0,64,67,1,0,0,0,65,66,1,0,0,0,65,63,1,0,0,0,66,71,
		1,0,0,0,67,65,1,0,0,0,68,69,5,42,0,0,69,72,5,47,0,0,70,72,5,0,0,1,71,68,
		1,0,0,0,71,70,1,0,0,0,72,73,1,0,0,0,73,74,6,1,0,0,74,4,1,0,0,0,75,77,5,
		10,0,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,87,1,
		0,0,0,80,81,5,13,0,0,81,83,5,10,0,0,82,80,1,0,0,0,83,84,1,0,0,0,84,82,
		1,0,0,0,84,85,1,0,0,0,85,87,1,0,0,0,86,76,1,0,0,0,86,82,1,0,0,0,87,6,1,
		0,0,0,88,89,5,45,0,0,89,8,1,0,0,0,90,94,5,62,0,0,91,93,7,0,0,0,92,91,1,
		0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,10,1,0,0,0,96,94,1,
		0,0,0,97,101,5,60,0,0,98,100,7,0,0,0,99,98,1,0,0,0,100,103,1,0,0,0,101,
		99,1,0,0,0,101,102,1,0,0,0,102,12,1,0,0,0,103,101,1,0,0,0,104,108,5,44,
		0,0,105,107,7,0,0,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,
		109,1,0,0,0,109,14,1,0,0,0,110,108,1,0,0,0,111,115,5,59,0,0,112,114,7,
		0,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,
		116,16,1,0,0,0,117,115,1,0,0,0,118,119,5,47,0,0,119,18,1,0,0,0,120,121,
		5,92,0,0,121,122,5,92,0,0,122,20,1,0,0,0,123,124,5,92,0,0,124,125,5,45,
		0,0,125,22,1,0,0,0,126,127,5,92,0,0,127,128,5,62,0,0,128,24,1,0,0,0,129,
		130,5,92,0,0,130,131,5,60,0,0,131,26,1,0,0,0,132,133,5,92,0,0,133,134,
		5,44,0,0,134,28,1,0,0,0,135,136,5,92,0,0,136,137,5,59,0,0,137,30,1,0,0,
		0,138,139,5,92,0,0,139,140,5,47,0,0,140,141,5,47,0,0,141,32,1,0,0,0,142,
		143,5,92,0,0,143,144,5,47,0,0,144,145,5,42,0,0,145,34,1,0,0,0,146,147,
		5,92,0,0,147,36,1,0,0,0,148,149,8,1,0,0,149,38,1,0,0,0,150,152,3,37,18,
		0,151,150,1,0,0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,
		40,1,0,0,0,14,0,47,51,55,65,71,78,84,86,94,101,108,115,153,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
