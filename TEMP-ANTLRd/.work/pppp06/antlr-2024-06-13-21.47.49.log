2024-06-13 21:47:48:872 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Describe06 (RULES (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n') (ALT EOF))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) (BLOCK (ALT '*/') (ALT EOF))) skip))) (RULE NEWLINE (BLOCK (ALT (+ (BLOCK (ALT '\n')))) (ALT (+ (BLOCK (ALT '\r\n')))))) (RULE HYPHEN (BLOCK (ALT '-'))) (RULE RIGHT_ARROW (BLOCK (ALT '>' (* (BLOCK (ALT [ \r\n\t\u000B\u000C\u0085\u00A0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000])))))) (RULE SEPARATOR (BLOCK (ALT ',' (* (BLOCK (ALT [ \r\n\t\u000B\u000C\u0085\u00A0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000])))))) (RULE TERMINATOR (BLOCK (ALT ';' (* (BLOCK (ALT [ \r\n\t\u000B\u000C\u0085\u00A0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000])))))) (RULE FORWARD_SLASH (BLOCK (ALT '/'))) (RULE ESCAPE_ESCAPE (BLOCK (ALT '\\\\'))) (RULE ESCAPE_HYPHEN (BLOCK (ALT '\\-'))) (RULE ESCAPE_RIGHT_ARROW (BLOCK (ALT '\\>'))) (RULE ESCAPE_SEPARATOR (BLOCK (ALT '\\,'))) (RULE ESCAPE_TERMINATOR (BLOCK (ALT '\\;'))) (RULE ESCAPE_LCOMMENT (BLOCK (ALT '\\//'))) (RULE ESCAPE_BCOMMENT (BLOCK (ALT '\\/*'))) (RULE ESCAPE (BLOCK (ALT '\\'))) (RULE DATA_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET [\->,;*/\\]))))) (RULE DATA (BLOCK (ALT (+ (BLOCK (ALT DATA_CHAR)))))) (RULE producer (BLOCK (ALT HYPHEN RIGHT_ARROW))) (RULE text_chunk (BLOCK (ALT ESCAPE_ESCAPE) (ALT ESCAPE_HYPHEN) (ALT ESCAPE_RIGHT_ARROW) (ALT ESCAPE_SEPARATOR) (ALT ESCAPE_TERMINATOR) (ALT ESCAPE_LCOMMENT) (ALT ESCAPE_BCOMMENT) (ALT ESCAPE) (ALT NEWLINE) (ALT HYPHEN) (ALT RIGHT_ARROW) (ALT FORWARD_SLASH) (ALT DATA))) (RULE item (BLOCK (ALT (+ (BLOCK (ALT text_chunk)))))) (RULE expression (BLOCK (ALT item producer item_or_expression_list TERMINATOR) (ALT item producer item TERMINATOR) (ALT item producer expression TERMINATOR) (ALT item producer TERMINATOR))) (RULE item_or_expression_part (BLOCK (ALT item SEPARATOR) (ALT expression (? (BLOCK (ALT SEPARATOR)))))) (RULE item_or_expression_list (BLOCK (ALT (+ (BLOCK (ALT item_or_expression_part))) item) (ALT (+ (BLOCK (ALT item_or_expression_part))) expression))) (RULE expression_list (BLOCK (ALT (+ (BLOCK (ALT expression))) expression))) (RULE scripture (BLOCK (ALT expression_list EOF) (ALT expression EOF)))))
2024-06-13 21:47:48:901 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Describe06 (RULES (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n') (ALT EOF))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) (BLOCK (ALT '*/') (ALT EOF))) skip))) (RULE NEWLINE (BLOCK (ALT (+ (BLOCK (ALT '\n')))) (ALT (+ (BLOCK (ALT '\r\n')))))) (RULE HYPHEN (BLOCK (ALT '-'))) (RULE RIGHT_ARROW (BLOCK (ALT '>' (* (BLOCK (ALT [ \r\n\t\u000B\u000C\u0085\u00A0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000])))))) (RULE SEPARATOR (BLOCK (ALT ',' (* (BLOCK (ALT [ \r\n\t\u000B\u000C\u0085\u00A0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000])))))) (RULE TERMINATOR (BLOCK (ALT ';' (* (BLOCK (ALT [ \r\n\t\u000B\u000C\u0085\u00A0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000])))))) (RULE FORWARD_SLASH (BLOCK (ALT '/'))) (RULE ESCAPE_ESCAPE (BLOCK (ALT '\\\\'))) (RULE ESCAPE_HYPHEN (BLOCK (ALT '\\-'))) (RULE ESCAPE_RIGHT_ARROW (BLOCK (ALT '\\>'))) (RULE ESCAPE_SEPARATOR (BLOCK (ALT '\\,'))) (RULE ESCAPE_TERMINATOR (BLOCK (ALT '\\;'))) (RULE ESCAPE_LCOMMENT (BLOCK (ALT '\\//'))) (RULE ESCAPE_BCOMMENT (BLOCK (ALT '\\/*'))) (RULE ESCAPE (BLOCK (ALT '\\'))) (RULE DATA_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET [\->,;*/\\]))))) (RULE DATA (BLOCK (ALT (+ (BLOCK (ALT DATA_CHAR)))))) (RULE producer (BLOCK (ALT HYPHEN RIGHT_ARROW))) (RULE text_chunk (BLOCK (ALT (SET ESCAPE_ESCAPE ESCAPE_HYPHEN ESCAPE_RIGHT_ARROW ESCAPE_SEPARATOR ESCAPE_TERMINATOR ESCAPE_LCOMMENT ESCAPE_BCOMMENT ESCAPE NEWLINE HYPHEN RIGHT_ARROW FORWARD_SLASH DATA)))) (RULE item (BLOCK (ALT (+ (BLOCK (ALT text_chunk)))))) (RULE expression (BLOCK (ALT item producer item_or_expression_list TERMINATOR) (ALT item producer item TERMINATOR) (ALT item producer expression TERMINATOR) (ALT item producer TERMINATOR))) (RULE item_or_expression_part (BLOCK (ALT item SEPARATOR) (ALT expression (? (BLOCK (ALT SEPARATOR)))))) (RULE item_or_expression_list (BLOCK (ALT (+ (BLOCK (ALT item_or_expression_part))) item) (ALT (+ (BLOCK (ALT item_or_expression_part))) expression))) (RULE expression_list (BLOCK (ALT (+ (BLOCK (ALT expression))) expression))) (RULE scripture (BLOCK (ALT expression_list EOF) (ALT expression EOF)))))
2024-06-13 21:47:48:941 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Describe06 (RULES (RULE producer (BLOCK (ALT HYPHEN RIGHT_ARROW))) (RULE text_chunk (BLOCK (ALT (SET ESCAPE_ESCAPE ESCAPE_HYPHEN ESCAPE_RIGHT_ARROW ESCAPE_SEPARATOR ESCAPE_TERMINATOR ESCAPE_LCOMMENT ESCAPE_BCOMMENT ESCAPE NEWLINE HYPHEN RIGHT_ARROW FORWARD_SLASH DATA)))) (RULE item (BLOCK (ALT (+ (BLOCK (ALT text_chunk)))))) (RULE expression (BLOCK (ALT item producer item_or_expression_list TERMINATOR) (ALT item producer item TERMINATOR) (ALT item producer expression TERMINATOR) (ALT item producer TERMINATOR))) (RULE item_or_expression_part (BLOCK (ALT item SEPARATOR) (ALT expression (? (BLOCK (ALT SEPARATOR)))))) (RULE item_or_expression_list (BLOCK (ALT (+ (BLOCK (ALT item_or_expression_part))) item) (ALT (+ (BLOCK (ALT item_or_expression_part))) expression))) (RULE expression_list (BLOCK (ALT (+ (BLOCK (ALT expression))) expression))) (RULE scripture (BLOCK (ALT expression_list EOF) (ALT expression EOF)))))
2024-06-13 21:47:48:942 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR Describe06Lexer (RULES (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n') (ALT EOF))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) (BLOCK (ALT '*/') (ALT EOF))) skip))) (RULE NEWLINE (BLOCK (ALT (+ (BLOCK (ALT '\n')))) (ALT (+ (BLOCK (ALT '\r\n')))))) (RULE HYPHEN (BLOCK (ALT '-'))) (RULE RIGHT_ARROW (BLOCK (ALT '>' (* (BLOCK (ALT [ \r\n\t\u000B\u000C\u0085\u00A0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000])))))) (RULE SEPARATOR (BLOCK (ALT ',' (* (BLOCK (ALT [ \r\n\t\u000B\u000C\u0085\u00A0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000])))))) (RULE TERMINATOR (BLOCK (ALT ';' (* (BLOCK (ALT [ \r\n\t\u000B\u000C\u0085\u00A0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000])))))) (RULE FORWARD_SLASH (BLOCK (ALT '/'))) (RULE ESCAPE_ESCAPE (BLOCK (ALT '\\\\'))) (RULE ESCAPE_HYPHEN (BLOCK (ALT '\\-'))) (RULE ESCAPE_RIGHT_ARROW (BLOCK (ALT '\\>'))) (RULE ESCAPE_SEPARATOR (BLOCK (ALT '\\,'))) (RULE ESCAPE_TERMINATOR (BLOCK (ALT '\\;'))) (RULE ESCAPE_LCOMMENT (BLOCK (ALT '\\//'))) (RULE ESCAPE_BCOMMENT (BLOCK (ALT '\\/*'))) (RULE ESCAPE (BLOCK (ALT '\\'))) (RULE DATA_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET [\->,;*/\\]))))) (RULE DATA (BLOCK (ALT (+ (BLOCK (ALT DATA_CHAR))))))))
2024-06-13 21:47:49:495 semantics LogManager.java:25 tokens={EOF=-1, LINE_COMMENT=1, BLOCK_COMMENT=2, NEWLINE=3, HYPHEN=4, RIGHT_ARROW=5, SEPARATOR=6, TERMINATOR=7, FORWARD_SLASH=8, ESCAPE_ESCAPE=9, ESCAPE_HYPHEN=10, ESCAPE_RIGHT_ARROW=11, ESCAPE_SEPARATOR=12, ESCAPE_TERMINATOR=13, ESCAPE_LCOMMENT=14, ESCAPE_BCOMMENT=15, ESCAPE=16, DATA=17}
2024-06-13 21:47:49:495 semantics LogManager.java:25 strings={'-'=4, '/'=8, '\\\\'=9, '\\-'=10, '\\>'=11, '\\,'=12, '\\;'=13, '\\//'=14, '\\/*'=15, '\\'=16}
2024-06-13 21:47:49:558 LL1 LogManager.java:25 
DECISION 0 in rule item
2024-06-13 21:47:49:561 LL1 LogManager.java:25 look=[{3..5, 8..17}, {4, 6..7}]
2024-06-13 21:47:49:562 LL1 LogManager.java:25 LL(1)? false
2024-06-13 21:47:49:562 LL1 LogManager.java:25 
DECISION 1 in rule expression
2024-06-13 21:47:49:562 LL1 LogManager.java:25 look=[{3..5, 8..17}, {3..5, 8..17}, {3..5, 8..17}, {3..5, 8..17}]
2024-06-13 21:47:49:562 LL1 LogManager.java:25 LL(1)? false
2024-06-13 21:47:49:563 LL1 LogManager.java:25 
DECISION 2 in rule item_or_expression_part
2024-06-13 21:47:49:563 LL1 LogManager.java:25 look=[6, {3..5, 8..17}]
2024-06-13 21:47:49:564 LL1 LogManager.java:25 LL(1)? true
2024-06-13 21:47:49:564 LL1 LogManager.java:25 
DECISION 3 in rule item_or_expression_part
2024-06-13 21:47:49:564 LL1 LogManager.java:25 look=[{3..5, 8..17}, {3..5, 8..17}]
2024-06-13 21:47:49:564 LL1 LogManager.java:25 LL(1)? false
2024-06-13 21:47:49:564 LL1 LogManager.java:25 
DECISION 4 in rule item_or_expression_list
2024-06-13 21:47:49:565 LL1 LogManager.java:25 look=[{3..5, 8..17}, {3..5, 8..17}]
2024-06-13 21:47:49:565 LL1 LogManager.java:25 LL(1)? false
2024-06-13 21:47:49:565 LL1 LogManager.java:25 
DECISION 5 in rule item_or_expression_list
2024-06-13 21:47:49:566 LL1 LogManager.java:25 look=[{3..5, 8..17}, {3..5, 8..17}]
2024-06-13 21:47:49:566 LL1 LogManager.java:25 LL(1)? false
2024-06-13 21:47:49:566 LL1 LogManager.java:25 
DECISION 6 in rule item_or_expression_list
2024-06-13 21:47:49:566 LL1 LogManager.java:25 look=[{3..5, 8..17}, {3..5, 8..17}]
2024-06-13 21:47:49:566 LL1 LogManager.java:25 LL(1)? false
2024-06-13 21:47:49:566 LL1 LogManager.java:25 
DECISION 7 in rule expression_list
2024-06-13 21:47:49:567 LL1 LogManager.java:25 look=[{3..5, 8..17}, {3..5, 8..17}]
2024-06-13 21:47:49:567 LL1 LogManager.java:25 LL(1)? false
2024-06-13 21:47:49:567 LL1 LogManager.java:25 
DECISION 8 in rule scripture
2024-06-13 21:47:49:567 LL1 LogManager.java:25 look=[{3..5, 8..17}, {3..5, 8..17}]
2024-06-13 21:47:49:567 LL1 LogManager.java:25 LL(1)? false
