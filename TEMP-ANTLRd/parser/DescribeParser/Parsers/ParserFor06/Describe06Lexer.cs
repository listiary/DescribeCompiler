//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe06.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe06Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, HYPHEN=3, RIGHT_ARROW=4, SEPARATOR=5, 
		TERMINATOR=6, FORWARD_SLASHES=7, FORWARD_SLASH=8, ESCAPE_ESCAPE=9, ESCAPE_HYPHEN=10, 
		ESCAPE_RIGHT_ARROW=11, ESCAPE_SEPARATOR=12, ESCAPE_TERMINATOR=13, ESCAPE_LCOMMENT=14, 
		ESCAPE_BCOMMENT=15, ESCAPE=16, DATA=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LINE_COMMENT", "BLOCK_COMMENT", "HYPHEN", "RIGHT_ARROW", "SEPARATOR", 
		"TERMINATOR", "FORWARD_SLASHES", "FORWARD_SLASH", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", 
		"ESCAPE_RIGHT_ARROW", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", 
		"ESCAPE_BCOMMENT", "ESCAPE", "DATA_CHAR", "DATA"
	};


	public Describe06Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe06Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'-'", null, null, null, "'//'", "'/'", "'\\\\'", "'\\-'", 
		"'\\>'", "'\\,'", "'\\;'", "'\\//'", "'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "HYPHEN", "RIGHT_ARROW", "SEPARATOR", 
		"TERMINATOR", "FORWARD_SLASHES", "FORWARD_SLASH", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", 
		"ESCAPE_RIGHT_ARROW", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", 
		"ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe06.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe06Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,17,145,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,1,0,5,0,43,8,0,10,0,
		12,0,46,9,0,1,0,3,0,49,8,0,1,0,1,0,5,0,53,8,0,10,0,12,0,56,9,0,1,0,3,0,
		59,8,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,67,8,1,10,1,12,1,70,9,1,1,1,1,1,1,1,
		1,1,5,1,76,8,1,10,1,12,1,79,9,1,1,1,3,1,82,8,1,1,1,1,1,1,2,1,2,1,3,1,3,
		5,3,90,8,3,10,3,12,3,93,9,3,1,4,1,4,5,4,97,8,4,10,4,12,4,100,9,4,1,5,1,
		5,5,5,104,8,5,10,5,12,5,107,9,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,
		9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
		1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,4,17,142,8,17,11,17,12,17,
		143,2,44,68,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,0,35,17,1,0,2,10,0,9,13,32,32,133,133,160,
		160,5760,5760,8192,8202,8232,8233,8239,8239,8287,8287,12288,12288,6,0,
		42,42,44,45,47,47,59,59,62,62,92,92,154,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,62,1,0,0,0,
		5,85,1,0,0,0,7,87,1,0,0,0,9,94,1,0,0,0,11,101,1,0,0,0,13,108,1,0,0,0,15,
		111,1,0,0,0,17,113,1,0,0,0,19,116,1,0,0,0,21,119,1,0,0,0,23,122,1,0,0,
		0,25,125,1,0,0,0,27,128,1,0,0,0,29,132,1,0,0,0,31,136,1,0,0,0,33,138,1,
		0,0,0,35,141,1,0,0,0,37,38,5,47,0,0,38,39,5,47,0,0,39,40,5,32,0,0,40,44,
		1,0,0,0,41,43,9,0,0,0,42,41,1,0,0,0,43,46,1,0,0,0,44,45,1,0,0,0,44,42,
		1,0,0,0,45,58,1,0,0,0,46,44,1,0,0,0,47,49,5,13,0,0,48,47,1,0,0,0,48,49,
		1,0,0,0,49,50,1,0,0,0,50,54,5,10,0,0,51,53,7,0,0,0,52,51,1,0,0,0,53,56,
		1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,59,1,0,0,0,56,54,1,0,0,0,57,59,
		5,0,0,1,58,48,1,0,0,0,58,57,1,0,0,0,59,60,1,0,0,0,60,61,6,0,0,0,61,2,1,
		0,0,0,62,63,5,47,0,0,63,64,5,42,0,0,64,68,1,0,0,0,65,67,9,0,0,0,66,65,
		1,0,0,0,67,70,1,0,0,0,68,69,1,0,0,0,68,66,1,0,0,0,69,81,1,0,0,0,70,68,
		1,0,0,0,71,72,5,42,0,0,72,73,5,47,0,0,73,77,1,0,0,0,74,76,7,0,0,0,75,74,
		1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,82,1,0,0,0,79,77,
		1,0,0,0,80,82,5,0,0,1,81,71,1,0,0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,84,
		6,1,0,0,84,4,1,0,0,0,85,86,5,45,0,0,86,6,1,0,0,0,87,91,5,62,0,0,88,90,
		7,0,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,8,1,
		0,0,0,93,91,1,0,0,0,94,98,5,44,0,0,95,97,7,0,0,0,96,95,1,0,0,0,97,100,
		1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,10,1,0,0,0,100,98,1,0,0,0,101,105,
		5,59,0,0,102,104,7,0,0,0,103,102,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,
		0,105,106,1,0,0,0,106,12,1,0,0,0,107,105,1,0,0,0,108,109,5,47,0,0,109,
		110,5,47,0,0,110,14,1,0,0,0,111,112,5,47,0,0,112,16,1,0,0,0,113,114,5,
		92,0,0,114,115,5,92,0,0,115,18,1,0,0,0,116,117,5,92,0,0,117,118,5,45,0,
		0,118,20,1,0,0,0,119,120,5,92,0,0,120,121,5,62,0,0,121,22,1,0,0,0,122,
		123,5,92,0,0,123,124,5,44,0,0,124,24,1,0,0,0,125,126,5,92,0,0,126,127,
		5,59,0,0,127,26,1,0,0,0,128,129,5,92,0,0,129,130,5,47,0,0,130,131,5,47,
		0,0,131,28,1,0,0,0,132,133,5,92,0,0,133,134,5,47,0,0,134,135,5,42,0,0,
		135,30,1,0,0,0,136,137,5,92,0,0,137,32,1,0,0,0,138,139,8,1,0,0,139,34,
		1,0,0,0,140,142,3,33,16,0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,0,
		0,0,143,144,1,0,0,0,144,36,1,0,0,0,12,0,44,48,54,58,68,77,81,91,98,105,
		143,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
