//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe06.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe06Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, NEWLINE=3, HYPHEN=4, RIGHT_ARROW=5, SEPARATOR=6, 
		TERMINATOR=7, FORWARD_SLASH=8, ESCAPE_ESCAPE=9, ESCAPE_HYPHEN=10, ESCAPE_RIGHT_ARROW=11, 
		ESCAPE_SEPARATOR=12, ESCAPE_TERMINATOR=13, ESCAPE_LCOMMENT=14, ESCAPE_BCOMMENT=15, 
		ESCAPE=16, DATA=17;
	public const int
		RULE_producer = 0, RULE_text_chunk = 1, RULE_item = 2, RULE_expression = 3, 
		RULE_item_or_expression_part = 4, RULE_item_or_expression_list = 5, RULE_expression_list = 6, 
		RULE_scripture = 7;
	public static readonly string[] ruleNames = {
		"producer", "text_chunk", "item", "expression", "item_or_expression_part", 
		"item_or_expression_list", "expression_list", "scripture"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'-'", null, null, null, "'/'", "'\\\\'", "'\\-'", 
		"'\\>'", "'\\,'", "'\\;'", "'\\//'", "'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "NEWLINE", "HYPHEN", "RIGHT_ARROW", 
		"SEPARATOR", "TERMINATOR", "FORWARD_SLASH", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", 
		"ESCAPE_RIGHT_ARROW", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", 
		"ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe06.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe06Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Describe06Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Describe06Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProducerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe06Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe06Parser.RIGHT_ARROW, 0); }
		public ProducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_producer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.EnterProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.ExitProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe06Visitor<TResult> typedVisitor = visitor as IDescribe06Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProducer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProducerContext producer() {
		ProducerContext _localctx = new ProducerContext(Context, State);
		EnterRule(_localctx, 0, RULE_producer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(HYPHEN);
			State = 17;
			Match(RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Text_chunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_ESCAPE() { return GetToken(Describe06Parser.ESCAPE_ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_HYPHEN() { return GetToken(Describe06Parser.ESCAPE_HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_ARROW() { return GetToken(Describe06Parser.ESCAPE_RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SEPARATOR() { return GetToken(Describe06Parser.ESCAPE_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_TERMINATOR() { return GetToken(Describe06Parser.ESCAPE_TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LCOMMENT() { return GetToken(Describe06Parser.ESCAPE_LCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_BCOMMENT() { return GetToken(Describe06Parser.ESCAPE_BCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(Describe06Parser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Describe06Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe06Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe06Parser.RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASH() { return GetToken(Describe06Parser.FORWARD_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(Describe06Parser.DATA, 0); }
		public Text_chunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.EnterText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.ExitText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe06Visitor<TResult> typedVisitor = visitor as IDescribe06Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText_chunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Text_chunkContext text_chunk() {
		Text_chunkContext _localctx = new Text_chunkContext(Context, State);
		EnterRule(_localctx, 2, RULE_text_chunk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 261944L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext[] text_chunk() {
			return GetRuleContexts<Text_chunkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext text_chunk(int i) {
			return GetRuleContext<Text_chunkContext>(i);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe06Visitor<TResult> typedVisitor = visitor as IDescribe06Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 4, RULE_item);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 21;
					text_chunk();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 24;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProducerContext producer() {
			return GetRuleContext<ProducerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATOR() { return GetToken(Describe06Parser.TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_listContext item_or_expression_list() {
			return GetRuleContext<Item_or_expression_listContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe06Visitor<TResult> typedVisitor = visitor as IDescribe06Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26;
				item();
				State = 27;
				producer();
				State = 28;
				Match(TERMINATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30;
				item();
				State = 31;
				producer();
				State = 32;
				item();
				State = 33;
				Match(TERMINATOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 35;
				item();
				State = 36;
				producer();
				State = 37;
				expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 39;
				item();
				State = 40;
				producer();
				State = 41;
				expression();
				State = 42;
				Match(TERMINATOR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 44;
				item();
				State = 45;
				producer();
				State = 46;
				item_or_expression_list();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 48;
				item();
				State = 49;
				producer();
				State = 50;
				item_or_expression_list();
				State = 51;
				Match(TERMINATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(Describe06Parser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe06Visitor<TResult> typedVisitor = visitor as IDescribe06Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_partContext item_or_expression_part() {
		Item_or_expression_partContext _localctx = new Item_or_expression_partContext(Context, State);
		EnterRule(_localctx, 8, RULE_item_or_expression_part);
		int _la;
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55;
				item();
				State = 56;
				Match(SEPARATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				expression();
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 59;
					Match(SEPARATOR);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext[] item_or_expression_part() {
			return GetRuleContexts<Item_or_expression_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext item_or_expression_part(int i) {
			return GetRuleContext<Item_or_expression_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe06Visitor<TResult> typedVisitor = visitor as IDescribe06Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_listContext item_or_expression_list() {
		Item_or_expression_listContext _localctx = new Item_or_expression_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_item_or_expression_list);
		try {
			int _alt;
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 64;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 67;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 69;
				item();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 71;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 74;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 76;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe06Visitor<TResult> typedVisitor = visitor as IDescribe06Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 80;
					expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 83;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 85;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Describe06Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scripture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.EnterScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe06Listener typedListener = listener as IDescribe06Listener;
			if (typedListener != null) typedListener.ExitScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe06Visitor<TResult> typedVisitor = visitor as IDescribe06Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScripture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptureContext scripture() {
		ScriptureContext _localctx = new ScriptureContext(Context, State);
		EnterRule(_localctx, 14, RULE_scripture);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				expression_list();
				State = 88;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				expression();
				State = 91;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,17,96,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,1,1,1,1,2,4,2,23,8,2,11,2,12,2,24,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,3,3,54,8,3,1,4,1,4,1,4,1,4,1,4,3,4,61,8,4,3,4,63,8,
		4,1,5,4,5,66,8,5,11,5,12,5,67,1,5,1,5,1,5,4,5,73,8,5,11,5,12,5,74,1,5,
		1,5,3,5,79,8,5,1,6,4,6,82,8,6,11,6,12,6,83,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
		1,7,3,7,94,8,7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,1,2,0,3,5,8,17,100,0,16,
		1,0,0,0,2,19,1,0,0,0,4,22,1,0,0,0,6,53,1,0,0,0,8,62,1,0,0,0,10,78,1,0,
		0,0,12,81,1,0,0,0,14,93,1,0,0,0,16,17,5,4,0,0,17,18,5,5,0,0,18,1,1,0,0,
		0,19,20,7,0,0,0,20,3,1,0,0,0,21,23,3,2,1,0,22,21,1,0,0,0,23,24,1,0,0,0,
		24,22,1,0,0,0,24,25,1,0,0,0,25,5,1,0,0,0,26,27,3,4,2,0,27,28,3,0,0,0,28,
		29,5,7,0,0,29,54,1,0,0,0,30,31,3,4,2,0,31,32,3,0,0,0,32,33,3,4,2,0,33,
		34,5,7,0,0,34,54,1,0,0,0,35,36,3,4,2,0,36,37,3,0,0,0,37,38,3,6,3,0,38,
		54,1,0,0,0,39,40,3,4,2,0,40,41,3,0,0,0,41,42,3,6,3,0,42,43,5,7,0,0,43,
		54,1,0,0,0,44,45,3,4,2,0,45,46,3,0,0,0,46,47,3,10,5,0,47,54,1,0,0,0,48,
		49,3,4,2,0,49,50,3,0,0,0,50,51,3,10,5,0,51,52,5,7,0,0,52,54,1,0,0,0,53,
		26,1,0,0,0,53,30,1,0,0,0,53,35,1,0,0,0,53,39,1,0,0,0,53,44,1,0,0,0,53,
		48,1,0,0,0,54,7,1,0,0,0,55,56,3,4,2,0,56,57,5,6,0,0,57,63,1,0,0,0,58,60,
		3,6,3,0,59,61,5,6,0,0,60,59,1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,55,
		1,0,0,0,62,58,1,0,0,0,63,9,1,0,0,0,64,66,3,8,4,0,65,64,1,0,0,0,66,67,1,
		0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,69,1,0,0,0,69,70,3,4,2,0,70,79,1,
		0,0,0,71,73,3,8,4,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,0,74,75,1,
		0,0,0,75,76,1,0,0,0,76,77,3,6,3,0,77,79,1,0,0,0,78,65,1,0,0,0,78,72,1,
		0,0,0,79,11,1,0,0,0,80,82,3,6,3,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,
		0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,86,3,6,3,0,86,13,1,0,0,0,87,88,3,
		12,6,0,88,89,5,0,0,1,89,94,1,0,0,0,90,91,3,6,3,0,91,92,5,0,0,1,92,94,1,
		0,0,0,93,87,1,0,0,0,93,90,1,0,0,0,94,15,1,0,0,0,9,24,53,60,62,67,74,78,
		83,93
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
