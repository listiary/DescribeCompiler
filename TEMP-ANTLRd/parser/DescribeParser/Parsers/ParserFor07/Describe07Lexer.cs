//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe07.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe07Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, HYPHEN=3, RIGHT_ARROW=4, LEFT_ARROW=5, 
		SEPARATOR=6, TERMINATOR=7, FORWARD_SLASHES=8, FORWARD_SLASH=9, ESCAPE_ESCAPE=10, 
		ESCAPE_HYPHEN=11, ESCAPE_RIGHT_ARROW=12, ESCAPE_LEFT_ARROW=13, ESCAPE_SEPARATOR=14, 
		ESCAPE_TERMINATOR=15, ESCAPE_LCOMMENT=16, ESCAPE_BCOMMENT=17, ESCAPE=18, 
		DATA=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LINE_COMMENT", "BLOCK_COMMENT", "HYPHEN", "RIGHT_ARROW", "LEFT_ARROW", 
		"SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", "FORWARD_SLASH", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA_CHAR", 
		"DATA"
	};


	public Describe07Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe07Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'-'", null, null, null, null, "'//'", "'/'", "'\\\\'", 
		"'\\-'", "'\\>'", "'\\<'", "'\\,'", "'\\;'", "'\\//'", "'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "HYPHEN", "RIGHT_ARROW", "LEFT_ARROW", 
		"SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", "FORWARD_SLASH", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe07.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe07Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,159,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,
		1,0,5,0,47,8,0,10,0,12,0,50,9,0,1,0,3,0,53,8,0,1,0,1,0,5,0,57,8,0,10,0,
		12,0,60,9,0,1,0,3,0,63,8,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,71,8,1,10,1,12,
		1,74,9,1,1,1,1,1,1,1,1,1,5,1,80,8,1,10,1,12,1,83,9,1,1,1,3,1,86,8,1,1,
		1,1,1,1,2,1,2,1,3,1,3,5,3,94,8,3,10,3,12,3,97,9,3,1,4,1,4,5,4,101,8,4,
		10,4,12,4,104,9,4,1,5,1,5,5,5,108,8,5,10,5,12,5,111,9,5,1,6,1,6,5,6,115,
		8,6,10,6,12,6,118,9,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,
		11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,
		15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,4,19,156,8,19,11,
		19,12,19,157,2,48,72,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,0,39,19,1,0,2,10,0,
		9,13,32,32,133,133,160,160,5760,5760,8192,8202,8232,8233,8239,8239,8287,
		8287,12288,12288,6,0,42,42,44,45,47,47,59,60,62,62,92,92,169,0,1,1,0,0,
		0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
		0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
		0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,66,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,
		0,9,98,1,0,0,0,11,105,1,0,0,0,13,112,1,0,0,0,15,119,1,0,0,0,17,122,1,0,
		0,0,19,124,1,0,0,0,21,127,1,0,0,0,23,130,1,0,0,0,25,133,1,0,0,0,27,136,
		1,0,0,0,29,139,1,0,0,0,31,142,1,0,0,0,33,146,1,0,0,0,35,150,1,0,0,0,37,
		152,1,0,0,0,39,155,1,0,0,0,41,42,5,47,0,0,42,43,5,47,0,0,43,44,5,32,0,
		0,44,48,1,0,0,0,45,47,9,0,0,0,46,45,1,0,0,0,47,50,1,0,0,0,48,49,1,0,0,
		0,48,46,1,0,0,0,49,62,1,0,0,0,50,48,1,0,0,0,51,53,5,13,0,0,52,51,1,0,0,
		0,52,53,1,0,0,0,53,54,1,0,0,0,54,58,5,10,0,0,55,57,7,0,0,0,56,55,1,0,0,
		0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,63,1,0,0,0,60,58,1,0,0,
		0,61,63,5,0,0,1,62,52,1,0,0,0,62,61,1,0,0,0,63,64,1,0,0,0,64,65,6,0,0,
		0,65,2,1,0,0,0,66,67,5,47,0,0,67,68,5,42,0,0,68,72,1,0,0,0,69,71,9,0,0,
		0,70,69,1,0,0,0,71,74,1,0,0,0,72,73,1,0,0,0,72,70,1,0,0,0,73,85,1,0,0,
		0,74,72,1,0,0,0,75,76,5,42,0,0,76,77,5,47,0,0,77,81,1,0,0,0,78,80,7,0,
		0,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,86,1,0,
		0,0,83,81,1,0,0,0,84,86,5,0,0,1,85,75,1,0,0,0,85,84,1,0,0,0,86,87,1,0,
		0,0,87,88,6,1,0,0,88,4,1,0,0,0,89,90,5,45,0,0,90,6,1,0,0,0,91,95,5,62,
		0,0,92,94,7,0,0,0,93,92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,
		0,0,96,8,1,0,0,0,97,95,1,0,0,0,98,102,5,60,0,0,99,101,7,0,0,0,100,99,1,
		0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,10,1,0,0,0,104,
		102,1,0,0,0,105,109,5,44,0,0,106,108,7,0,0,0,107,106,1,0,0,0,108,111,1,
		0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,12,1,0,0,0,111,109,1,0,0,0,112,
		116,5,59,0,0,113,115,7,0,0,0,114,113,1,0,0,0,115,118,1,0,0,0,116,114,1,
		0,0,0,116,117,1,0,0,0,117,14,1,0,0,0,118,116,1,0,0,0,119,120,5,47,0,0,
		120,121,5,47,0,0,121,16,1,0,0,0,122,123,5,47,0,0,123,18,1,0,0,0,124,125,
		5,92,0,0,125,126,5,92,0,0,126,20,1,0,0,0,127,128,5,92,0,0,128,129,5,45,
		0,0,129,22,1,0,0,0,130,131,5,92,0,0,131,132,5,62,0,0,132,24,1,0,0,0,133,
		134,5,92,0,0,134,135,5,60,0,0,135,26,1,0,0,0,136,137,5,92,0,0,137,138,
		5,44,0,0,138,28,1,0,0,0,139,140,5,92,0,0,140,141,5,59,0,0,141,30,1,0,0,
		0,142,143,5,92,0,0,143,144,5,47,0,0,144,145,5,47,0,0,145,32,1,0,0,0,146,
		147,5,92,0,0,147,148,5,47,0,0,148,149,5,42,0,0,149,34,1,0,0,0,150,151,
		5,92,0,0,151,36,1,0,0,0,152,153,8,1,0,0,153,38,1,0,0,0,154,156,3,37,18,
		0,155,154,1,0,0,0,156,157,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,
		40,1,0,0,0,13,0,48,52,58,62,72,81,85,95,102,109,116,157,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
