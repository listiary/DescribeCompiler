//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe08.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe08Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, LINK=3, NEWLINE=4, HYPHEN=5, RIGHT_ARROW=6, 
		LEFT_ARROW=7, SEPARATOR=8, TERMINATOR=9, FORWARD_SLASH=10, ESCAPE_ESCAPE=11, 
		ESCAPE_HYPHEN=12, ESCAPE_RIGHT_ARROW=13, ESCAPE_LEFT_ARROW=14, ESCAPE_RIGHT_SQUARE=15, 
		ESCAPE_LEFT_SQUARE=16, ESCAPE_SEPARATOR=17, ESCAPE_TERMINATOR=18, ESCAPE_LCOMMENT=19, 
		ESCAPE_BCOMMENT=20, ESCAPE=21, DATA=22;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LINE_COMMENT", "BLOCK_COMMENT", "LINK", "NEWLINE", "HYPHEN", "RIGHT_ARROW", 
		"LEFT_ARROW", "SEPARATOR", "TERMINATOR", "FORWARD_SLASH", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", 
		"ESCAPE_LEFT_SQUARE", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", 
		"ESCAPE_BCOMMENT", "ESCAPE", "DATA_CHAR", "DATA"
	};


	public Describe08Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe08Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'-'", null, null, null, null, "'/'", "'\\\\'", 
		"'\\-'", "'\\>'", "'\\<'", "'\\]'", "'\\['", "'\\,'", "'\\;'", "'\\//'", 
		"'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "LINK", "NEWLINE", "HYPHEN", "RIGHT_ARROW", 
		"LEFT_ARROW", "SEPARATOR", "TERMINATOR", "FORWARD_SLASH", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", 
		"ESCAPE_LEFT_SQUARE", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", 
		"ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe08.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe08Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,22,181,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,1,0,1,0,1,0,1,0,5,0,52,8,0,10,0,12,0,55,9,0,1,0,3,0,58,
		8,0,1,0,1,0,3,0,62,8,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,70,8,1,10,1,12,1,73,
		9,1,1,1,1,1,1,1,3,1,78,8,1,1,1,1,1,1,2,1,2,5,2,84,8,2,10,2,12,2,87,9,2,
		1,2,1,2,5,2,91,8,2,10,2,12,2,94,9,2,1,3,4,3,97,8,3,11,3,12,3,98,1,3,1,
		3,4,3,103,8,3,11,3,12,3,104,3,3,107,8,3,1,4,1,4,1,5,1,5,5,5,113,8,5,10,
		5,12,5,116,9,5,1,6,1,6,5,6,120,8,6,10,6,12,6,123,9,6,1,7,1,7,5,7,127,8,
		7,10,7,12,7,130,9,7,1,8,1,8,5,8,134,8,8,10,8,12,8,137,9,8,1,9,1,9,1,10,
		1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,
		1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,
		1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,4,22,178,8,22,11,22,12,22,179,
		3,53,71,85,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,0,45,22,1,
		0,2,10,0,9,13,32,32,133,133,160,160,5760,5760,8192,8202,8232,8233,8239,
		8239,8287,8287,12288,12288,7,0,42,42,44,45,47,47,59,60,62,62,91,93,124,
		124,194,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
		11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
		0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
		0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,45,
		1,0,0,0,1,47,1,0,0,0,3,65,1,0,0,0,5,81,1,0,0,0,7,106,1,0,0,0,9,108,1,0,
		0,0,11,110,1,0,0,0,13,117,1,0,0,0,15,124,1,0,0,0,17,131,1,0,0,0,19,138,
		1,0,0,0,21,140,1,0,0,0,23,143,1,0,0,0,25,146,1,0,0,0,27,149,1,0,0,0,29,
		152,1,0,0,0,31,155,1,0,0,0,33,158,1,0,0,0,35,161,1,0,0,0,37,164,1,0,0,
		0,39,168,1,0,0,0,41,172,1,0,0,0,43,174,1,0,0,0,45,177,1,0,0,0,47,48,5,
		47,0,0,48,49,5,47,0,0,49,53,1,0,0,0,50,52,9,0,0,0,51,50,1,0,0,0,52,55,
		1,0,0,0,53,54,1,0,0,0,53,51,1,0,0,0,54,61,1,0,0,0,55,53,1,0,0,0,56,58,
		5,13,0,0,57,56,1,0,0,0,57,58,1,0,0,0,58,59,1,0,0,0,59,62,5,10,0,0,60,62,
		5,0,0,1,61,57,1,0,0,0,61,60,1,0,0,0,62,63,1,0,0,0,63,64,6,0,0,0,64,2,1,
		0,0,0,65,66,5,47,0,0,66,67,5,42,0,0,67,71,1,0,0,0,68,70,9,0,0,0,69,68,
		1,0,0,0,70,73,1,0,0,0,71,72,1,0,0,0,71,69,1,0,0,0,72,77,1,0,0,0,73,71,
		1,0,0,0,74,75,5,42,0,0,75,78,5,47,0,0,76,78,5,0,0,1,77,74,1,0,0,0,77,76,
		1,0,0,0,78,79,1,0,0,0,79,80,6,1,0,0,80,4,1,0,0,0,81,85,5,91,0,0,82,84,
		9,0,0,0,83,82,1,0,0,0,84,87,1,0,0,0,85,86,1,0,0,0,85,83,1,0,0,0,86,88,
		1,0,0,0,87,85,1,0,0,0,88,92,5,93,0,0,89,91,7,0,0,0,90,89,1,0,0,0,91,94,
		1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,6,1,0,0,0,94,92,1,0,0,0,95,97,5,
		10,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,107,
		1,0,0,0,100,101,5,13,0,0,101,103,5,10,0,0,102,100,1,0,0,0,103,104,1,0,
		0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,96,1,0,0,0,106,
		102,1,0,0,0,107,8,1,0,0,0,108,109,5,45,0,0,109,10,1,0,0,0,110,114,5,62,
		0,0,111,113,7,0,0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,
		115,1,0,0,0,115,12,1,0,0,0,116,114,1,0,0,0,117,121,5,60,0,0,118,120,7,
		0,0,0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,
		122,14,1,0,0,0,123,121,1,0,0,0,124,128,5,44,0,0,125,127,7,0,0,0,126,125,
		1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,16,1,0,0,0,
		130,128,1,0,0,0,131,135,5,59,0,0,132,134,7,0,0,0,133,132,1,0,0,0,134,137,
		1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,18,1,0,0,0,137,135,1,0,0,0,
		138,139,5,47,0,0,139,20,1,0,0,0,140,141,5,92,0,0,141,142,5,92,0,0,142,
		22,1,0,0,0,143,144,5,92,0,0,144,145,5,45,0,0,145,24,1,0,0,0,146,147,5,
		92,0,0,147,148,5,62,0,0,148,26,1,0,0,0,149,150,5,92,0,0,150,151,5,60,0,
		0,151,28,1,0,0,0,152,153,5,92,0,0,153,154,5,93,0,0,154,30,1,0,0,0,155,
		156,5,92,0,0,156,157,5,91,0,0,157,32,1,0,0,0,158,159,5,92,0,0,159,160,
		5,44,0,0,160,34,1,0,0,0,161,162,5,92,0,0,162,163,5,59,0,0,163,36,1,0,0,
		0,164,165,5,92,0,0,165,166,5,47,0,0,166,167,5,47,0,0,167,38,1,0,0,0,168,
		169,5,92,0,0,169,170,5,47,0,0,170,171,5,42,0,0,171,40,1,0,0,0,172,173,
		5,92,0,0,173,42,1,0,0,0,174,175,8,1,0,0,175,44,1,0,0,0,176,178,3,43,21,
		0,177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
		46,1,0,0,0,16,0,53,57,61,71,77,85,92,98,104,106,114,121,128,135,179,1,
		6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
