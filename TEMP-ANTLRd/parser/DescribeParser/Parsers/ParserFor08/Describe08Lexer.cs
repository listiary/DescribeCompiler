//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe08.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe08Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, LINK=3, HYPHEN=4, RIGHT_ARROW=5, LEFT_ARROW=6, 
		SEPARATOR=7, TERMINATOR=8, FORWARD_SLASHES=9, FORWARD_SLASH=10, ESCAPE_ESCAPE=11, 
		ESCAPE_HYPHEN=12, ESCAPE_RIGHT_ARROW=13, ESCAPE_LEFT_ARROW=14, ESCAPE_RIGHT_SQUARE=15, 
		ESCAPE_LEFT_SQUARE=16, ESCAPE_SEPARATOR=17, ESCAPE_TERMINATOR=18, ESCAPE_LCOMMENT=19, 
		ESCAPE_BCOMMENT=20, ESCAPE=21, DATA=22;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LINE_COMMENT", "BLOCK_COMMENT", "LINK", "HYPHEN", "RIGHT_ARROW", "LEFT_ARROW", 
		"SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", "FORWARD_SLASH", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", 
		"ESCAPE_LEFT_SQUARE", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", 
		"ESCAPE_BCOMMENT", "ESCAPE", "DATA_CHAR", "DATA"
	};


	public Describe08Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe08Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'-'", null, null, null, null, "'//'", "'/'", 
		"'\\\\'", "'\\-'", "'\\>'", "'\\<'", "'\\]'", "'\\['", "'\\,'", "'\\;'", 
		"'\\//'", "'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "LINK", "HYPHEN", "RIGHT_ARROW", 
		"LEFT_ARROW", "SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", "FORWARD_SLASH", 
		"ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", 
		"ESCAPE_RIGHT_SQUARE", "ESCAPE_LEFT_SQUARE", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", 
		"ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe08.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe08Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,22,185,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,5,0,53,8,0,10,0,12,0,56,9,0,1,0,3,0,
		59,8,0,1,0,1,0,5,0,63,8,0,10,0,12,0,66,9,0,1,0,3,0,69,8,0,1,0,1,0,1,1,
		1,1,1,1,1,1,5,1,77,8,1,10,1,12,1,80,9,1,1,1,1,1,1,1,1,1,5,1,86,8,1,10,
		1,12,1,89,9,1,1,1,3,1,92,8,1,1,1,1,1,1,2,1,2,5,2,98,8,2,10,2,12,2,101,
		9,2,1,2,1,2,5,2,105,8,2,10,2,12,2,108,9,2,1,3,1,3,1,4,1,4,5,4,114,8,4,
		10,4,12,4,117,9,4,1,5,1,5,5,5,121,8,5,10,5,12,5,124,9,5,1,6,1,6,5,6,128,
		8,6,10,6,12,6,131,9,6,1,7,1,7,5,7,135,8,7,10,7,12,7,138,9,7,1,8,1,8,1,
		8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,
		1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,4,22,182,8,22,11,
		22,12,22,183,3,54,78,99,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
		10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
		0,45,22,1,0,2,10,0,9,13,32,32,133,133,160,160,5760,5760,8192,8202,8232,
		8233,8239,8239,8287,8287,12288,12288,6,0,42,42,44,45,47,47,59,60,62,62,
		91,93,197,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,45,
		1,0,0,0,1,47,1,0,0,0,3,72,1,0,0,0,5,95,1,0,0,0,7,109,1,0,0,0,9,111,1,0,
		0,0,11,118,1,0,0,0,13,125,1,0,0,0,15,132,1,0,0,0,17,139,1,0,0,0,19,142,
		1,0,0,0,21,144,1,0,0,0,23,147,1,0,0,0,25,150,1,0,0,0,27,153,1,0,0,0,29,
		156,1,0,0,0,31,159,1,0,0,0,33,162,1,0,0,0,35,165,1,0,0,0,37,168,1,0,0,
		0,39,172,1,0,0,0,41,176,1,0,0,0,43,178,1,0,0,0,45,181,1,0,0,0,47,48,5,
		47,0,0,48,49,5,47,0,0,49,50,5,32,0,0,50,54,1,0,0,0,51,53,9,0,0,0,52,51,
		1,0,0,0,53,56,1,0,0,0,54,55,1,0,0,0,54,52,1,0,0,0,55,68,1,0,0,0,56,54,
		1,0,0,0,57,59,5,13,0,0,58,57,1,0,0,0,58,59,1,0,0,0,59,60,1,0,0,0,60,64,
		5,10,0,0,61,63,7,0,0,0,62,61,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,64,65,
		1,0,0,0,65,69,1,0,0,0,66,64,1,0,0,0,67,69,5,0,0,1,68,58,1,0,0,0,68,67,
		1,0,0,0,69,70,1,0,0,0,70,71,6,0,0,0,71,2,1,0,0,0,72,73,5,47,0,0,73,74,
		5,42,0,0,74,78,1,0,0,0,75,77,9,0,0,0,76,75,1,0,0,0,77,80,1,0,0,0,78,79,
		1,0,0,0,78,76,1,0,0,0,79,91,1,0,0,0,80,78,1,0,0,0,81,82,5,42,0,0,82,83,
		5,47,0,0,83,87,1,0,0,0,84,86,7,0,0,0,85,84,1,0,0,0,86,89,1,0,0,0,87,85,
		1,0,0,0,87,88,1,0,0,0,88,92,1,0,0,0,89,87,1,0,0,0,90,92,5,0,0,1,91,81,
		1,0,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,94,6,1,0,0,94,4,1,0,0,0,95,99,5,
		91,0,0,96,98,9,0,0,0,97,96,1,0,0,0,98,101,1,0,0,0,99,100,1,0,0,0,99,97,
		1,0,0,0,100,102,1,0,0,0,101,99,1,0,0,0,102,106,5,93,0,0,103,105,7,0,0,
		0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,
		6,1,0,0,0,108,106,1,0,0,0,109,110,5,45,0,0,110,8,1,0,0,0,111,115,5,62,
		0,0,112,114,7,0,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,
		116,1,0,0,0,116,10,1,0,0,0,117,115,1,0,0,0,118,122,5,60,0,0,119,121,7,
		0,0,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,
		123,12,1,0,0,0,124,122,1,0,0,0,125,129,5,44,0,0,126,128,7,0,0,0,127,126,
		1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,14,1,0,0,0,
		131,129,1,0,0,0,132,136,5,59,0,0,133,135,7,0,0,0,134,133,1,0,0,0,135,138,
		1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,16,1,0,0,0,138,136,1,0,0,0,
		139,140,5,47,0,0,140,141,5,47,0,0,141,18,1,0,0,0,142,143,5,47,0,0,143,
		20,1,0,0,0,144,145,5,92,0,0,145,146,5,92,0,0,146,22,1,0,0,0,147,148,5,
		92,0,0,148,149,5,45,0,0,149,24,1,0,0,0,150,151,5,92,0,0,151,152,5,62,0,
		0,152,26,1,0,0,0,153,154,5,92,0,0,154,155,5,60,0,0,155,28,1,0,0,0,156,
		157,5,92,0,0,157,158,5,93,0,0,158,30,1,0,0,0,159,160,5,92,0,0,160,161,
		5,91,0,0,161,32,1,0,0,0,162,163,5,92,0,0,163,164,5,44,0,0,164,34,1,0,0,
		0,165,166,5,92,0,0,166,167,5,59,0,0,167,36,1,0,0,0,168,169,5,92,0,0,169,
		170,5,47,0,0,170,171,5,47,0,0,171,38,1,0,0,0,172,173,5,92,0,0,173,174,
		5,47,0,0,174,175,5,42,0,0,175,40,1,0,0,0,176,177,5,92,0,0,177,42,1,0,0,
		0,178,179,8,1,0,0,179,44,1,0,0,0,180,182,3,43,21,0,181,180,1,0,0,0,182,
		183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,46,1,0,0,0,15,0,54,58,
		64,68,78,87,91,99,106,115,122,129,136,183,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
