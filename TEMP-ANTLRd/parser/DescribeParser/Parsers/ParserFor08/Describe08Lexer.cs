//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe08.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe08Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, NEWLINE=3, HYPHEN=4, PIPE=5, RIGHT_ARROW=6, 
		LEFT_ARROW=7, RIGHT_SQUARE=8, LEFT_SQUARE=9, SEPARATOR=10, TERMINATOR=11, 
		FORWARD_SLASH=12, ESCAPE_ESCAPE=13, ESCAPE_HYPHEN=14, ESCAPE_PIPE=15, 
		ESCAPE_RIGHT_ARROW=16, ESCAPE_LEFT_ARROW=17, ESCAPE_RIGHT_SQUARE=18, ESCAPE_LEFT_SQUARE=19, 
		ESCAPE_SEPARATOR=20, ESCAPE_TERMINATOR=21, ESCAPE_LCOMMENT=22, ESCAPE_BCOMMENT=23, 
		ESCAPE=24, DATA=25;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LINE_COMMENT", "BLOCK_COMMENT", "NEWLINE", "HYPHEN", "PIPE", "RIGHT_ARROW", 
		"LEFT_ARROW", "RIGHT_SQUARE", "LEFT_SQUARE", "SEPARATOR", "TERMINATOR", 
		"FORWARD_SLASH", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_PIPE", "ESCAPE_RIGHT_ARROW", 
		"ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", "ESCAPE_LEFT_SQUARE", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA_CHAR", 
		"DATA"
	};


	public Describe08Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe08Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'-'", "'|'", null, null, null, null, null, null, 
		"'/'", "'\\\\'", "'\\-'", "'\\|'", "'\\>'", "'\\<'", "'\\]'", "'\\['", 
		"'\\,'", "'\\;'", "'\\//'", "'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "NEWLINE", "HYPHEN", "PIPE", "RIGHT_ARROW", 
		"LEFT_ARROW", "RIGHT_SQUARE", "LEFT_SQUARE", "SEPARATOR", "TERMINATOR", 
		"FORWARD_SLASH", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_PIPE", "ESCAPE_RIGHT_ARROW", 
		"ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", "ESCAPE_LEFT_SQUARE", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe08.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe08Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,25,192,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,0,1,0,5,0,58,8,
		0,10,0,12,0,61,9,0,1,0,3,0,64,8,0,1,0,1,0,3,0,68,8,0,1,0,1,0,1,1,1,1,1,
		1,1,1,5,1,76,8,1,10,1,12,1,79,9,1,1,1,1,1,1,1,3,1,84,8,1,1,1,1,1,1,2,4,
		2,89,8,2,11,2,12,2,90,1,2,1,2,4,2,95,8,2,11,2,12,2,96,3,2,99,8,2,1,3,1,
		3,1,4,1,4,1,5,1,5,5,5,107,8,5,10,5,12,5,110,9,5,1,6,1,6,5,6,114,8,6,10,
		6,12,6,117,9,6,1,7,1,7,5,7,121,8,7,10,7,12,7,124,9,7,1,8,1,8,5,8,128,8,
		8,10,8,12,8,131,9,8,1,9,1,9,5,9,135,8,9,10,9,12,9,138,9,9,1,10,1,10,5,
		10,142,8,10,10,10,12,10,145,9,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,
		13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,
		18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,
		22,1,22,1,23,1,23,1,24,1,24,1,25,4,25,189,8,25,11,25,12,25,190,2,59,77,
		0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,0,51,
		25,1,0,2,10,0,9,13,32,32,133,133,160,160,5760,5760,8192,8202,8232,8233,
		8239,8239,8287,8287,12288,12288,7,0,42,42,44,45,47,47,59,60,62,62,91,93,
		124,124,205,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,71,1,0,0,
		0,5,98,1,0,0,0,7,100,1,0,0,0,9,102,1,0,0,0,11,104,1,0,0,0,13,111,1,0,0,
		0,15,118,1,0,0,0,17,125,1,0,0,0,19,132,1,0,0,0,21,139,1,0,0,0,23,146,1,
		0,0,0,25,148,1,0,0,0,27,151,1,0,0,0,29,154,1,0,0,0,31,157,1,0,0,0,33,160,
		1,0,0,0,35,163,1,0,0,0,37,166,1,0,0,0,39,169,1,0,0,0,41,172,1,0,0,0,43,
		175,1,0,0,0,45,179,1,0,0,0,47,183,1,0,0,0,49,185,1,0,0,0,51,188,1,0,0,
		0,53,54,5,47,0,0,54,55,5,47,0,0,55,59,1,0,0,0,56,58,9,0,0,0,57,56,1,0,
		0,0,58,61,1,0,0,0,59,60,1,0,0,0,59,57,1,0,0,0,60,67,1,0,0,0,61,59,1,0,
		0,0,62,64,5,13,0,0,63,62,1,0,0,0,63,64,1,0,0,0,64,65,1,0,0,0,65,68,5,10,
		0,0,66,68,5,0,0,1,67,63,1,0,0,0,67,66,1,0,0,0,68,69,1,0,0,0,69,70,6,0,
		0,0,70,2,1,0,0,0,71,72,5,47,0,0,72,73,5,42,0,0,73,77,1,0,0,0,74,76,9,0,
		0,0,75,74,1,0,0,0,76,79,1,0,0,0,77,78,1,0,0,0,77,75,1,0,0,0,78,83,1,0,
		0,0,79,77,1,0,0,0,80,81,5,42,0,0,81,84,5,47,0,0,82,84,5,0,0,1,83,80,1,
		0,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,86,6,1,0,0,86,4,1,0,0,0,87,89,5,10,
		0,0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,99,1,0,
		0,0,92,93,5,13,0,0,93,95,5,10,0,0,94,92,1,0,0,0,95,96,1,0,0,0,96,94,1,
		0,0,0,96,97,1,0,0,0,97,99,1,0,0,0,98,88,1,0,0,0,98,94,1,0,0,0,99,6,1,0,
		0,0,100,101,5,45,0,0,101,8,1,0,0,0,102,103,5,124,0,0,103,10,1,0,0,0,104,
		108,5,62,0,0,105,107,7,0,0,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,
		0,0,0,108,109,1,0,0,0,109,12,1,0,0,0,110,108,1,0,0,0,111,115,5,60,0,0,
		112,114,7,0,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,
		1,0,0,0,116,14,1,0,0,0,117,115,1,0,0,0,118,122,5,93,0,0,119,121,7,0,0,
		0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,
		16,1,0,0,0,124,122,1,0,0,0,125,129,5,91,0,0,126,128,7,0,0,0,127,126,1,
		0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,18,1,0,0,0,131,
		129,1,0,0,0,132,136,5,44,0,0,133,135,7,0,0,0,134,133,1,0,0,0,135,138,1,
		0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,20,1,0,0,0,138,136,1,0,0,0,139,
		143,5,59,0,0,140,142,7,0,0,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,
		0,0,0,143,144,1,0,0,0,144,22,1,0,0,0,145,143,1,0,0,0,146,147,5,47,0,0,
		147,24,1,0,0,0,148,149,5,92,0,0,149,150,5,92,0,0,150,26,1,0,0,0,151,152,
		5,92,0,0,152,153,5,45,0,0,153,28,1,0,0,0,154,155,5,92,0,0,155,156,5,124,
		0,0,156,30,1,0,0,0,157,158,5,92,0,0,158,159,5,62,0,0,159,32,1,0,0,0,160,
		161,5,92,0,0,161,162,5,60,0,0,162,34,1,0,0,0,163,164,5,92,0,0,164,165,
		5,93,0,0,165,36,1,0,0,0,166,167,5,92,0,0,167,168,5,91,0,0,168,38,1,0,0,
		0,169,170,5,92,0,0,170,171,5,44,0,0,171,40,1,0,0,0,172,173,5,92,0,0,173,
		174,5,59,0,0,174,42,1,0,0,0,175,176,5,92,0,0,176,177,5,47,0,0,177,178,
		5,47,0,0,178,44,1,0,0,0,179,180,5,92,0,0,180,181,5,47,0,0,181,182,5,42,
		0,0,182,46,1,0,0,0,183,184,5,92,0,0,184,48,1,0,0,0,185,186,8,1,0,0,186,
		50,1,0,0,0,187,189,3,49,24,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,
		0,0,0,190,191,1,0,0,0,191,52,1,0,0,0,16,0,59,63,67,77,83,90,96,98,108,
		115,122,129,136,143,190,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
