//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe08.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe08Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, NEWLINE=3, HYPHEN=4, PIPE=5, RIGHT_ARROW=6, 
		LEFT_ARROW=7, RIGHT_SQUARE=8, LEFT_SQUARE=9, SEPARATOR=10, TERMINATOR=11, 
		FORWARD_SLASH=12, ESCAPE_ESCAPE=13, ESCAPE_HYPHEN=14, ESCAPE_PIPE=15, 
		ESCAPE_RIGHT_ARROW=16, ESCAPE_LEFT_ARROW=17, ESCAPE_RIGHT_SQUARE=18, ESCAPE_LEFT_SQUARE=19, 
		ESCAPE_SEPARATOR=20, ESCAPE_TERMINATOR=21, ESCAPE_LCOMMENT=22, ESCAPE_BCOMMENT=23, 
		ESCAPE=24, DATA=25;
	public const int
		RULE_producer = 0, RULE_text_chunk = 1, RULE_tag = 2, RULE_link = 3, RULE_item = 4, 
		RULE_expression = 5, RULE_item_or_expression_part = 6, RULE_item_or_expression_list = 7, 
		RULE_expression_list = 8, RULE_scripture = 9;
	public static readonly string[] ruleNames = {
		"producer", "text_chunk", "tag", "link", "item", "expression", "item_or_expression_part", 
		"item_or_expression_list", "expression_list", "scripture"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'-'", "'|'", null, null, null, null, null, null, 
		"'/'", "'\\\\'", "'\\-'", "'\\|'", "'\\>'", "'\\<'", "'\\]'", "'\\['", 
		"'\\,'", "'\\;'", "'\\//'", "'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "NEWLINE", "HYPHEN", "PIPE", "RIGHT_ARROW", 
		"LEFT_ARROW", "RIGHT_SQUARE", "LEFT_SQUARE", "SEPARATOR", "TERMINATOR", 
		"FORWARD_SLASH", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_PIPE", "ESCAPE_RIGHT_ARROW", 
		"ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", "ESCAPE_LEFT_SQUARE", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe08.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe08Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Describe08Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Describe08Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProducerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe08Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe08Parser.RIGHT_ARROW, 0); }
		public ProducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_producer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProducer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProducerContext producer() {
		ProducerContext _localctx = new ProducerContext(Context, State);
		EnterRule(_localctx, 0, RULE_producer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			Match(HYPHEN);
			State = 21;
			Match(RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Text_chunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_ESCAPE() { return GetToken(Describe08Parser.ESCAPE_ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_HYPHEN() { return GetToken(Describe08Parser.ESCAPE_HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_PIPE() { return GetToken(Describe08Parser.ESCAPE_PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_ARROW() { return GetToken(Describe08Parser.ESCAPE_RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_ARROW() { return GetToken(Describe08Parser.ESCAPE_LEFT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_SQUARE() { return GetToken(Describe08Parser.ESCAPE_RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_SQUARE() { return GetToken(Describe08Parser.ESCAPE_LEFT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SEPARATOR() { return GetToken(Describe08Parser.ESCAPE_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_TERMINATOR() { return GetToken(Describe08Parser.ESCAPE_TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LCOMMENT() { return GetToken(Describe08Parser.ESCAPE_LCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_BCOMMENT() { return GetToken(Describe08Parser.ESCAPE_BCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(Describe08Parser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Describe08Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe08Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(Describe08Parser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe08Parser.RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE() { return GetToken(Describe08Parser.RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASH() { return GetToken(Describe08Parser.FORWARD_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(Describe08Parser.DATA, 0); }
		public Text_chunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText_chunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Text_chunkContext text_chunk() {
		Text_chunkContext _localctx = new Text_chunkContext(Context, State);
		EnterRule(_localctx, 2, RULE_text_chunk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 67105144L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ARROW() { return GetToken(Describe08Parser.LEFT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe08Parser.RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DATA() { return GetTokens(Describe08Parser.DATA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA(int i) {
			return GetToken(Describe08Parser.DATA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HYPHEN() { return GetTokens(Describe08Parser.HYPHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN(int i) {
			return GetToken(Describe08Parser.HYPHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARD_SLASH() { return GetTokens(Describe08Parser.FORWARD_SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASH(int i) {
			return GetToken(Describe08Parser.FORWARD_SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE() { return GetTokens(Describe08Parser.ESCAPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE(int i) {
			return GetToken(Describe08Parser.ESCAPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_ESCAPE() { return GetTokens(Describe08Parser.ESCAPE_ESCAPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_ESCAPE(int i) {
			return GetToken(Describe08Parser.ESCAPE_ESCAPE, i);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 4, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			Match(LEFT_ARROW);
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 26;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 50343952L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 50343952L) != 0) );
			State = 31;
			Match(RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE() { return GetToken(Describe08Parser.LEFT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE() { return GetToken(Describe08Parser.RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DATA() { return GetTokens(Describe08Parser.DATA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA(int i) {
			return GetToken(Describe08Parser.DATA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HYPHEN() { return GetTokens(Describe08Parser.HYPHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN(int i) {
			return GetToken(Describe08Parser.HYPHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARD_SLASH() { return GetTokens(Describe08Parser.FORWARD_SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASH(int i) {
			return GetToken(Describe08Parser.FORWARD_SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE() { return GetTokens(Describe08Parser.ESCAPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE(int i) {
			return GetToken(Describe08Parser.ESCAPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_ESCAPE() { return GetTokens(Describe08Parser.ESCAPE_ESCAPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_ESCAPE(int i) {
			return GetToken(Describe08Parser.ESCAPE_ESCAPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR() { return GetTokens(Describe08Parser.SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR(int i) {
			return GetToken(Describe08Parser.SEPARATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TERMINATOR() { return GetTokens(Describe08Parser.TERMINATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATOR(int i) {
			return GetToken(Describe08Parser.TERMINATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(Describe08Parser.PIPE, 0); }
		public LinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_link; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkContext link() {
		LinkContext _localctx = new LinkContext(Context, State);
		EnterRule(_localctx, 6, RULE_link);
		int _la;
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33;
				Match(LEFT_SQUARE);
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 34;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 50347024L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 37;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 50347024L) != 0) );
				State = 39;
				Match(RIGHT_SQUARE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				Match(LEFT_SQUARE);
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 41;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 50347024L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 44;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 50347024L) != 0) );
				State = 46;
				Match(PIPE);
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 47;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 50343952L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 50;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 50343952L) != 0) );
				State = 52;
				Match(RIGHT_SQUARE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext[] text_chunk() {
			return GetRuleContexts<Text_chunkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext text_chunk(int i) {
			return GetRuleContext<Text_chunkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext[] link() {
			return GetRuleContexts<LinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkContext link(int i) {
			return GetRuleContext<LinkContext>(i);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 8, RULE_item);
		int _la;
		try {
			int _alt;
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 55;
						text_chunk();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 58;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_ARROW) {
					{
					State = 60;
					tag();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 63;
					text_chunk();
					}
					}
					State = 66;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 67105144L) != 0) );
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 68;
					link();
					}
					}
					State = 71;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LEFT_SQUARE );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 73;
					text_chunk();
					}
					}
					State = 76;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 67105144L) != 0) );
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 78;
					link();
					}
					}
					State = 81;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LEFT_SQUARE );
				State = 83;
				tag();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 85;
					text_chunk();
					}
					}
					State = 88;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 67105144L) != 0) );
				State = 90;
				tag();
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 91;
					link();
					}
					}
					State = 94;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LEFT_SQUARE );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProducerContext producer() {
			return GetRuleContext<ProducerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_listContext item_or_expression_list() {
			return GetRuleContext<Item_or_expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATOR() { return GetToken(Describe08Parser.TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_expression);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				item();
				State = 99;
				producer();
				State = 100;
				item_or_expression_list();
				State = 101;
				Match(TERMINATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				item();
				State = 104;
				producer();
				State = 105;
				item();
				State = 106;
				Match(TERMINATOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 108;
				item();
				State = 109;
				producer();
				State = 110;
				expression();
				State = 111;
				Match(TERMINATOR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113;
				item();
				State = 114;
				producer();
				State = 115;
				Match(TERMINATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(Describe08Parser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_partContext item_or_expression_part() {
		Item_or_expression_partContext _localctx = new Item_or_expression_partContext(Context, State);
		EnterRule(_localctx, 12, RULE_item_or_expression_part);
		int _la;
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				item();
				State = 120;
				Match(SEPARATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				expression();
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 123;
					Match(SEPARATOR);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext[] item_or_expression_part() {
			return GetRuleContexts<Item_or_expression_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext item_or_expression_part(int i) {
			return GetRuleContext<Item_or_expression_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_listContext item_or_expression_list() {
		Item_or_expression_listContext _localctx = new Item_or_expression_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_item_or_expression_list);
		try {
			int _alt;
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 128;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 131;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 133;
				item();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 135;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 138;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 140;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 144;
					expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 149;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Describe08Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scripture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.EnterScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe08Listener typedListener = listener as IDescribe08Listener;
			if (typedListener != null) typedListener.ExitScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe08Visitor<TResult> typedVisitor = visitor as IDescribe08Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScripture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptureContext scripture() {
		ScriptureContext _localctx = new ScriptureContext(Context, State);
		EnterRule(_localctx, 18, RULE_scripture);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				expression_list();
				State = 152;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				expression();
				State = 155;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,25,160,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,1,1,1,1,1,2,1,2,4,2,28,8,2,11,2,12,2,29,
		1,2,1,2,1,3,1,3,4,3,36,8,3,11,3,12,3,37,1,3,1,3,1,3,4,3,43,8,3,11,3,12,
		3,44,1,3,1,3,4,3,49,8,3,11,3,12,3,50,1,3,3,3,54,8,3,1,4,4,4,57,8,4,11,
		4,12,4,58,1,4,3,4,62,8,4,1,4,4,4,65,8,4,11,4,12,4,66,1,4,4,4,70,8,4,11,
		4,12,4,71,1,4,4,4,75,8,4,11,4,12,4,76,1,4,4,4,80,8,4,11,4,12,4,81,1,4,
		1,4,1,4,4,4,87,8,4,11,4,12,4,88,1,4,1,4,4,4,93,8,4,11,4,12,4,94,3,4,97,
		8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,3,5,118,8,5,1,6,1,6,1,6,1,6,1,6,3,6,125,8,6,3,6,127,8,6,1,7,
		4,7,130,8,7,11,7,12,7,131,1,7,1,7,1,7,4,7,137,8,7,11,7,12,7,138,1,7,1,
		7,3,7,143,8,7,1,8,4,8,146,8,8,11,8,12,8,147,1,8,1,8,1,9,1,9,1,9,1,9,1,
		9,1,9,3,9,158,8,9,1,9,0,0,10,0,2,4,6,8,10,12,14,16,18,0,3,3,0,3,6,8,8,
		12,25,3,0,4,4,12,13,24,25,3,0,4,4,10,13,24,25,175,0,20,1,0,0,0,2,23,1,
		0,0,0,4,25,1,0,0,0,6,53,1,0,0,0,8,96,1,0,0,0,10,117,1,0,0,0,12,126,1,0,
		0,0,14,142,1,0,0,0,16,145,1,0,0,0,18,157,1,0,0,0,20,21,5,4,0,0,21,22,5,
		6,0,0,22,1,1,0,0,0,23,24,7,0,0,0,24,3,1,0,0,0,25,27,5,7,0,0,26,28,7,1,
		0,0,27,26,1,0,0,0,28,29,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,31,1,0,
		0,0,31,32,5,6,0,0,32,5,1,0,0,0,33,35,5,9,0,0,34,36,7,2,0,0,35,34,1,0,0,
		0,36,37,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,39,1,0,0,0,39,54,5,8,0,
		0,40,42,5,9,0,0,41,43,7,2,0,0,42,41,1,0,0,0,43,44,1,0,0,0,44,42,1,0,0,
		0,44,45,1,0,0,0,45,46,1,0,0,0,46,48,5,5,0,0,47,49,7,1,0,0,48,47,1,0,0,
		0,49,50,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,52,1,0,0,0,52,54,5,8,0,
		0,53,33,1,0,0,0,53,40,1,0,0,0,54,7,1,0,0,0,55,57,3,2,1,0,56,55,1,0,0,0,
		57,58,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,61,1,0,0,0,60,62,3,4,2,0,
		61,60,1,0,0,0,61,62,1,0,0,0,62,97,1,0,0,0,63,65,3,2,1,0,64,63,1,0,0,0,
		65,66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,70,3,6,3,0,
		69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,97,1,0,0,0,
		73,75,3,2,1,0,74,73,1,0,0,0,75,76,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,
		77,79,1,0,0,0,78,80,3,6,3,0,79,78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,
		81,82,1,0,0,0,82,83,1,0,0,0,83,84,3,4,2,0,84,97,1,0,0,0,85,87,3,2,1,0,
		86,85,1,0,0,0,87,88,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,
		90,92,3,4,2,0,91,93,3,6,3,0,92,91,1,0,0,0,93,94,1,0,0,0,94,92,1,0,0,0,
		94,95,1,0,0,0,95,97,1,0,0,0,96,56,1,0,0,0,96,64,1,0,0,0,96,74,1,0,0,0,
		96,86,1,0,0,0,97,9,1,0,0,0,98,99,3,8,4,0,99,100,3,0,0,0,100,101,3,14,7,
		0,101,102,5,11,0,0,102,118,1,0,0,0,103,104,3,8,4,0,104,105,3,0,0,0,105,
		106,3,8,4,0,106,107,5,11,0,0,107,118,1,0,0,0,108,109,3,8,4,0,109,110,3,
		0,0,0,110,111,3,10,5,0,111,112,5,11,0,0,112,118,1,0,0,0,113,114,3,8,4,
		0,114,115,3,0,0,0,115,116,5,11,0,0,116,118,1,0,0,0,117,98,1,0,0,0,117,
		103,1,0,0,0,117,108,1,0,0,0,117,113,1,0,0,0,118,11,1,0,0,0,119,120,3,8,
		4,0,120,121,5,10,0,0,121,127,1,0,0,0,122,124,3,10,5,0,123,125,5,10,0,0,
		124,123,1,0,0,0,124,125,1,0,0,0,125,127,1,0,0,0,126,119,1,0,0,0,126,122,
		1,0,0,0,127,13,1,0,0,0,128,130,3,12,6,0,129,128,1,0,0,0,130,131,1,0,0,
		0,131,129,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,134,3,8,4,0,134,
		143,1,0,0,0,135,137,3,12,6,0,136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,
		0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,141,3,10,5,0,141,143,1,0,0,0,
		142,129,1,0,0,0,142,136,1,0,0,0,143,15,1,0,0,0,144,146,3,10,5,0,145,144,
		1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,
		0,149,150,3,10,5,0,150,17,1,0,0,0,151,152,3,16,8,0,152,153,5,0,0,1,153,
		158,1,0,0,0,154,155,3,10,5,0,155,156,5,0,0,1,156,158,1,0,0,0,157,151,1,
		0,0,0,157,154,1,0,0,0,158,19,1,0,0,0,22,29,37,44,50,53,58,61,66,71,76,
		81,88,94,96,117,124,126,131,138,142,147,157
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
