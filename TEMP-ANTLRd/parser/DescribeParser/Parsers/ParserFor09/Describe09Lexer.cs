//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe09.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe09Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, LINK=3, DECORATOR=4, HYPHEN=5, RIGHT_ARROW=6, 
		LEFT_ARROW=7, SEPARATOR=8, TERMINATOR=9, FORWARD_SLASHES=10, FORWARD_SLASH=11, 
		ESCAPE_ESCAPE=12, ESCAPE_HYPHEN=13, ESCAPE_RIGHT_ARROW=14, ESCAPE_LEFT_ARROW=15, 
		ESCAPE_RIGHT_SQUARE=16, ESCAPE_LEFT_SQUARE=17, ESCAPE_RIGHT_CURL=18, ESCAPE_LEFT_CURL=19, 
		ESCAPE_SEPARATOR=20, ESCAPE_TERMINATOR=21, ESCAPE_LCOMMENT=22, ESCAPE_BCOMMENT=23, 
		ESCAPE=24, DATA=25;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LINE_COMMENT", "BLOCK_COMMENT", "LINK", "DECORATOR", "HYPHEN", "RIGHT_ARROW", 
		"LEFT_ARROW", "SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", "FORWARD_SLASH", 
		"ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", 
		"ESCAPE_RIGHT_SQUARE", "ESCAPE_LEFT_SQUARE", "ESCAPE_RIGHT_CURL", "ESCAPE_LEFT_CURL", 
		"ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", 
		"ESCAPE", "DATA_CHAR", "DATA"
	};


	public Describe09Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe09Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'-'", null, null, null, null, "'//'", "'/'", 
		"'\\\\'", "'\\-'", "'\\>'", "'\\<'", "'\\]'", "'\\['", "'\\}'", "'\\{'", 
		"'\\,'", "'\\;'", "'\\//'", "'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "LINK", "DECORATOR", "HYPHEN", 
		"RIGHT_ARROW", "LEFT_ARROW", "SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", 
		"FORWARD_SLASH", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", 
		"ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", "ESCAPE_LEFT_SQUARE", "ESCAPE_RIGHT_CURL", 
		"ESCAPE_LEFT_CURL", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", 
		"ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe09.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe09Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,25,211,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,0,1,0,1,0,5,0,59,
		8,0,10,0,12,0,62,9,0,1,0,3,0,65,8,0,1,0,1,0,5,0,69,8,0,10,0,12,0,72,9,
		0,1,0,3,0,75,8,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,83,8,1,10,1,12,1,86,9,1,1,
		1,1,1,1,1,1,1,5,1,92,8,1,10,1,12,1,95,9,1,1,1,3,1,98,8,1,1,1,1,1,1,2,1,
		2,5,2,104,8,2,10,2,12,2,107,9,2,1,2,1,2,5,2,111,8,2,10,2,12,2,114,9,2,
		1,3,1,3,5,3,118,8,3,10,3,12,3,121,9,3,1,3,1,3,5,3,125,8,3,10,3,12,3,128,
		9,3,1,4,1,4,1,5,1,5,5,5,134,8,5,10,5,12,5,137,9,5,1,6,1,6,5,6,141,8,6,
		10,6,12,6,144,9,6,1,7,1,7,5,7,148,8,7,10,7,12,7,151,9,7,1,8,1,8,5,8,155,
		8,8,10,8,12,8,158,9,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,
		12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,
		17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,
		21,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,4,25,208,8,25,11,25,12,
		25,209,4,60,84,105,119,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
		10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
		22,45,23,47,24,49,0,51,25,1,0,2,10,0,9,13,32,32,133,133,160,160,5760,5760,
		8192,8202,8232,8233,8239,8239,8287,8287,12288,12288,8,0,42,42,44,45,47,
		47,59,60,62,62,91,93,123,123,125,125,225,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,51,
		1,0,0,0,1,53,1,0,0,0,3,78,1,0,0,0,5,101,1,0,0,0,7,115,1,0,0,0,9,129,1,
		0,0,0,11,131,1,0,0,0,13,138,1,0,0,0,15,145,1,0,0,0,17,152,1,0,0,0,19,159,
		1,0,0,0,21,162,1,0,0,0,23,164,1,0,0,0,25,167,1,0,0,0,27,170,1,0,0,0,29,
		173,1,0,0,0,31,176,1,0,0,0,33,179,1,0,0,0,35,182,1,0,0,0,37,185,1,0,0,
		0,39,188,1,0,0,0,41,191,1,0,0,0,43,194,1,0,0,0,45,198,1,0,0,0,47,202,1,
		0,0,0,49,204,1,0,0,0,51,207,1,0,0,0,53,54,5,47,0,0,54,55,5,47,0,0,55,56,
		5,32,0,0,56,60,1,0,0,0,57,59,9,0,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,61,
		1,0,0,0,60,58,1,0,0,0,61,74,1,0,0,0,62,60,1,0,0,0,63,65,5,13,0,0,64,63,
		1,0,0,0,64,65,1,0,0,0,65,66,1,0,0,0,66,70,5,10,0,0,67,69,7,0,0,0,68,67,
		1,0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,75,1,0,0,0,72,70,
		1,0,0,0,73,75,5,0,0,1,74,64,1,0,0,0,74,73,1,0,0,0,75,76,1,0,0,0,76,77,
		6,0,0,0,77,2,1,0,0,0,78,79,5,47,0,0,79,80,5,42,0,0,80,84,1,0,0,0,81,83,
		9,0,0,0,82,81,1,0,0,0,83,86,1,0,0,0,84,85,1,0,0,0,84,82,1,0,0,0,85,97,
		1,0,0,0,86,84,1,0,0,0,87,88,5,42,0,0,88,89,5,47,0,0,89,93,1,0,0,0,90,92,
		7,0,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,98,
		1,0,0,0,95,93,1,0,0,0,96,98,5,0,0,1,97,87,1,0,0,0,97,96,1,0,0,0,98,99,
		1,0,0,0,99,100,6,1,0,0,100,4,1,0,0,0,101,105,5,91,0,0,102,104,9,0,0,0,
		103,102,1,0,0,0,104,107,1,0,0,0,105,106,1,0,0,0,105,103,1,0,0,0,106,108,
		1,0,0,0,107,105,1,0,0,0,108,112,5,93,0,0,109,111,7,0,0,0,110,109,1,0,0,
		0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,6,1,0,0,0,114,112,
		1,0,0,0,115,119,5,123,0,0,116,118,9,0,0,0,117,116,1,0,0,0,118,121,1,0,
		0,0,119,120,1,0,0,0,119,117,1,0,0,0,120,122,1,0,0,0,121,119,1,0,0,0,122,
		126,5,125,0,0,123,125,7,0,0,0,124,123,1,0,0,0,125,128,1,0,0,0,126,124,
		1,0,0,0,126,127,1,0,0,0,127,8,1,0,0,0,128,126,1,0,0,0,129,130,5,45,0,0,
		130,10,1,0,0,0,131,135,5,62,0,0,132,134,7,0,0,0,133,132,1,0,0,0,134,137,
		1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,12,1,0,0,0,137,135,1,0,0,0,
		138,142,5,60,0,0,139,141,7,0,0,0,140,139,1,0,0,0,141,144,1,0,0,0,142,140,
		1,0,0,0,142,143,1,0,0,0,143,14,1,0,0,0,144,142,1,0,0,0,145,149,5,44,0,
		0,146,148,7,0,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,
		150,1,0,0,0,150,16,1,0,0,0,151,149,1,0,0,0,152,156,5,59,0,0,153,155,7,
		0,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,
		157,18,1,0,0,0,158,156,1,0,0,0,159,160,5,47,0,0,160,161,5,47,0,0,161,20,
		1,0,0,0,162,163,5,47,0,0,163,22,1,0,0,0,164,165,5,92,0,0,165,166,5,92,
		0,0,166,24,1,0,0,0,167,168,5,92,0,0,168,169,5,45,0,0,169,26,1,0,0,0,170,
		171,5,92,0,0,171,172,5,62,0,0,172,28,1,0,0,0,173,174,5,92,0,0,174,175,
		5,60,0,0,175,30,1,0,0,0,176,177,5,92,0,0,177,178,5,93,0,0,178,32,1,0,0,
		0,179,180,5,92,0,0,180,181,5,91,0,0,181,34,1,0,0,0,182,183,5,92,0,0,183,
		184,5,125,0,0,184,36,1,0,0,0,185,186,5,92,0,0,186,187,5,123,0,0,187,38,
		1,0,0,0,188,189,5,92,0,0,189,190,5,44,0,0,190,40,1,0,0,0,191,192,5,92,
		0,0,192,193,5,59,0,0,193,42,1,0,0,0,194,195,5,92,0,0,195,196,5,47,0,0,
		196,197,5,47,0,0,197,44,1,0,0,0,198,199,5,92,0,0,199,200,5,47,0,0,200,
		201,5,42,0,0,201,46,1,0,0,0,202,203,5,92,0,0,203,48,1,0,0,0,204,205,8,
		1,0,0,205,50,1,0,0,0,206,208,3,49,24,0,207,206,1,0,0,0,208,209,1,0,0,0,
		209,207,1,0,0,0,209,210,1,0,0,0,210,52,1,0,0,0,17,0,60,64,70,74,84,93,
		97,105,112,119,126,135,142,149,156,209,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
