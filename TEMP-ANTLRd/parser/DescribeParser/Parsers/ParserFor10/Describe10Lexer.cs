//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe10.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe10Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, LINK=3, DECORATOR=4, HYPHEN=5, PRODUCTION_ARROW=6, 
		RIGHT_ARROW=7, LEFT_ARROW=8, SEPARATOR=9, TERMINATOR=10, FORWARD_SLASHES=11, 
		FORWARD_SLASH=12, COMMA=13, SEMICOLON=14, ESCAPE_ESCAPE=15, ESCAPE_HYPHEN=16, 
		ESCAPE_RIGHT_ARROW=17, ESCAPE_LEFT_ARROW=18, ESCAPE_RIGHT_SQUARE=19, ESCAPE_LEFT_SQUARE=20, 
		ESCAPE_RIGHT_CURL=21, ESCAPE_LEFT_CURL=22, ESCAPE_SEPARATOR=23, ESCAPE_TERMINATOR=24, 
		ESCAPE_LCOMMENT=25, ESCAPE_BCOMMENT=26, ESCAPE=27, DATA=28;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LINE_COMMENT", "BLOCK_COMMENT", "LINK", "DECORATOR", "HYPHEN", "PRODUCTION_ARROW", 
		"RIGHT_ARROW", "LEFT_ARROW", "SEPARATOR", "TERMINATOR", "FORWARD_SLASHES", 
		"FORWARD_SLASH", "COMMA", "SEMICOLON", "ESCAPE_ESCAPE", "ESCAPE_HYPHEN", 
		"ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", "ESCAPE_LEFT_SQUARE", 
		"ESCAPE_RIGHT_CURL", "ESCAPE_LEFT_CURL", "ESCAPE_SEPARATOR", "ESCAPE_TERMINATOR", 
		"ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA_CHAR", "DATA"
	};


	public Describe10Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe10Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'-'", null, null, null, null, null, "'//'", 
		"'/'", "','", "';'", "'\\\\'", "'\\-'", "'\\>'", "'\\<'", "'\\]'", "'\\['", 
		"'\\}'", "'\\{'", "'\\,'", "'\\;'", "'\\//'", "'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "LINK", "DECORATOR", "HYPHEN", 
		"PRODUCTION_ARROW", "RIGHT_ARROW", "LEFT_ARROW", "SEPARATOR", "TERMINATOR", 
		"FORWARD_SLASHES", "FORWARD_SLASH", "COMMA", "SEMICOLON", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", 
		"ESCAPE_LEFT_SQUARE", "ESCAPE_RIGHT_CURL", "ESCAPE_LEFT_CURL", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe10.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe10Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,28,282,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,1,0,1,0,1,0,1,0,1,0,5,0,65,8,0,10,0,12,0,68,9,0,1,0,3,0,71,8,0,1,
		0,1,0,5,0,75,8,0,10,0,12,0,78,9,0,1,0,3,0,81,8,0,1,0,1,0,1,1,1,1,1,1,1,
		1,5,1,89,8,1,10,1,12,1,92,9,1,1,1,1,1,1,1,1,1,5,1,98,8,1,10,1,12,1,101,
		9,1,1,1,3,1,104,8,1,1,1,1,1,1,2,1,2,5,2,110,8,2,10,2,12,2,113,9,2,1,2,
		1,2,5,2,117,8,2,10,2,12,2,120,9,2,1,3,1,3,5,3,124,8,3,10,3,12,3,127,9,
		3,1,3,1,3,5,3,131,8,3,10,3,12,3,134,9,3,1,4,1,4,1,5,1,5,5,5,140,8,5,10,
		5,12,5,143,9,5,1,5,1,5,5,5,147,8,5,10,5,12,5,150,9,5,1,5,1,5,1,5,1,5,5,
		5,156,8,5,10,5,12,5,159,9,5,3,5,161,8,5,1,6,1,6,5,6,165,8,6,10,6,12,6,
		168,9,6,1,7,1,7,5,7,172,8,7,10,7,12,7,175,9,7,1,8,1,8,5,8,179,8,8,10,8,
		12,8,182,9,8,1,8,1,8,5,8,186,8,8,10,8,12,8,189,9,8,1,8,1,8,1,8,1,8,5,8,
		195,8,8,10,8,12,8,198,9,8,3,8,200,8,8,1,9,1,9,5,9,204,8,9,10,9,12,9,207,
		9,9,1,9,1,9,5,9,211,8,9,10,9,12,9,214,9,9,1,9,1,9,1,9,1,9,5,9,220,8,9,
		10,9,12,9,223,9,9,3,9,225,8,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
		1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,
		1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,
		1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,27,
		1,27,1,28,4,28,279,8,28,11,28,12,28,280,4,66,90,111,125,0,29,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,0,
		57,28,1,0,3,10,0,9,13,32,32,133,133,160,160,5760,5760,8192,8202,8232,8233,
		8239,8239,8287,8287,12288,12288,11,0,9,9,11,13,32,32,133,133,160,160,5760,
		5760,8192,8202,8232,8233,8239,8239,8287,8287,12288,12288,8,0,42,42,44,
		45,47,47,59,60,62,62,91,93,123,123,125,125,306,0,1,1,0,0,0,0,3,1,0,0,0,
		0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
		0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
		27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
		0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
		0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,84,
		1,0,0,0,5,107,1,0,0,0,7,121,1,0,0,0,9,135,1,0,0,0,11,160,1,0,0,0,13,162,
		1,0,0,0,15,169,1,0,0,0,17,199,1,0,0,0,19,224,1,0,0,0,21,226,1,0,0,0,23,
		229,1,0,0,0,25,231,1,0,0,0,27,233,1,0,0,0,29,235,1,0,0,0,31,238,1,0,0,
		0,33,241,1,0,0,0,35,244,1,0,0,0,37,247,1,0,0,0,39,250,1,0,0,0,41,253,1,
		0,0,0,43,256,1,0,0,0,45,259,1,0,0,0,47,262,1,0,0,0,49,265,1,0,0,0,51,269,
		1,0,0,0,53,273,1,0,0,0,55,275,1,0,0,0,57,278,1,0,0,0,59,60,5,47,0,0,60,
		61,5,47,0,0,61,62,5,32,0,0,62,66,1,0,0,0,63,65,9,0,0,0,64,63,1,0,0,0,65,
		68,1,0,0,0,66,67,1,0,0,0,66,64,1,0,0,0,67,80,1,0,0,0,68,66,1,0,0,0,69,
		71,5,13,0,0,70,69,1,0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,76,5,10,0,0,73,
		75,7,0,0,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,
		81,1,0,0,0,78,76,1,0,0,0,79,81,5,0,0,1,80,70,1,0,0,0,80,79,1,0,0,0,81,
		82,1,0,0,0,82,83,6,0,0,0,83,2,1,0,0,0,84,85,5,47,0,0,85,86,5,42,0,0,86,
		90,1,0,0,0,87,89,9,0,0,0,88,87,1,0,0,0,89,92,1,0,0,0,90,91,1,0,0,0,90,
		88,1,0,0,0,91,103,1,0,0,0,92,90,1,0,0,0,93,94,5,42,0,0,94,95,5,47,0,0,
		95,99,1,0,0,0,96,98,7,0,0,0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,
		99,100,1,0,0,0,100,104,1,0,0,0,101,99,1,0,0,0,102,104,5,0,0,1,103,93,1,
		0,0,0,103,102,1,0,0,0,104,105,1,0,0,0,105,106,6,1,0,0,106,4,1,0,0,0,107,
		111,5,91,0,0,108,110,9,0,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,112,1,
		0,0,0,111,109,1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,114,118,5,93,0,0,
		115,117,7,0,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,
		1,0,0,0,119,6,1,0,0,0,120,118,1,0,0,0,121,125,5,123,0,0,122,124,9,0,0,
		0,123,122,1,0,0,0,124,127,1,0,0,0,125,126,1,0,0,0,125,123,1,0,0,0,126,
		128,1,0,0,0,127,125,1,0,0,0,128,132,5,125,0,0,129,131,7,0,0,0,130,129,
		1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,8,1,0,0,0,
		134,132,1,0,0,0,135,136,5,45,0,0,136,10,1,0,0,0,137,141,5,62,0,0,138,140,
		7,1,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,
		0,142,144,1,0,0,0,143,141,1,0,0,0,144,148,5,10,0,0,145,147,7,0,0,0,146,
		145,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,161,1,
		0,0,0,150,148,1,0,0,0,151,152,5,62,0,0,152,153,5,62,0,0,153,157,1,0,0,
		0,154,156,7,0,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,
		158,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,160,137,1,0,0,0,160,151,1,
		0,0,0,161,12,1,0,0,0,162,166,5,62,0,0,163,165,7,0,0,0,164,163,1,0,0,0,
		165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,14,1,0,0,0,168,166,
		1,0,0,0,169,173,5,60,0,0,170,172,7,0,0,0,171,170,1,0,0,0,172,175,1,0,0,
		0,173,171,1,0,0,0,173,174,1,0,0,0,174,16,1,0,0,0,175,173,1,0,0,0,176,180,
		5,44,0,0,177,179,7,1,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,
		0,180,181,1,0,0,0,181,183,1,0,0,0,182,180,1,0,0,0,183,187,5,10,0,0,184,
		186,7,0,0,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,
		0,0,0,188,200,1,0,0,0,189,187,1,0,0,0,190,191,5,44,0,0,191,192,5,44,0,
		0,192,196,1,0,0,0,193,195,7,0,0,0,194,193,1,0,0,0,195,198,1,0,0,0,196,
		194,1,0,0,0,196,197,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,199,176,1,
		0,0,0,199,190,1,0,0,0,200,18,1,0,0,0,201,205,5,59,0,0,202,204,7,1,0,0,
		203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,
		1,0,0,0,207,205,1,0,0,0,208,212,5,10,0,0,209,211,7,0,0,0,210,209,1,0,0,
		0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,225,1,0,0,0,214,
		212,1,0,0,0,215,216,5,59,0,0,216,217,5,59,0,0,217,221,1,0,0,0,218,220,
		7,0,0,0,219,218,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,
		0,222,225,1,0,0,0,223,221,1,0,0,0,224,201,1,0,0,0,224,215,1,0,0,0,225,
		20,1,0,0,0,226,227,5,47,0,0,227,228,5,47,0,0,228,22,1,0,0,0,229,230,5,
		47,0,0,230,24,1,0,0,0,231,232,5,44,0,0,232,26,1,0,0,0,233,234,5,59,0,0,
		234,28,1,0,0,0,235,236,5,92,0,0,236,237,5,92,0,0,237,30,1,0,0,0,238,239,
		5,92,0,0,239,240,5,45,0,0,240,32,1,0,0,0,241,242,5,92,0,0,242,243,5,62,
		0,0,243,34,1,0,0,0,244,245,5,92,0,0,245,246,5,60,0,0,246,36,1,0,0,0,247,
		248,5,92,0,0,248,249,5,93,0,0,249,38,1,0,0,0,250,251,5,92,0,0,251,252,
		5,91,0,0,252,40,1,0,0,0,253,254,5,92,0,0,254,255,5,125,0,0,255,42,1,0,
		0,0,256,257,5,92,0,0,257,258,5,123,0,0,258,44,1,0,0,0,259,260,5,92,0,0,
		260,261,5,44,0,0,261,46,1,0,0,0,262,263,5,92,0,0,263,264,5,59,0,0,264,
		48,1,0,0,0,265,266,5,92,0,0,266,267,5,47,0,0,267,268,5,47,0,0,268,50,1,
		0,0,0,269,270,5,92,0,0,270,271,5,47,0,0,271,272,5,42,0,0,272,52,1,0,0,
		0,273,274,5,92,0,0,274,54,1,0,0,0,275,276,8,2,0,0,276,56,1,0,0,0,277,279,
		3,55,27,0,278,277,1,0,0,0,279,280,1,0,0,0,280,278,1,0,0,0,280,281,1,0,
		0,0,281,58,1,0,0,0,27,0,66,70,76,80,90,99,103,111,118,125,132,141,148,
		157,160,166,173,180,187,196,199,205,212,221,224,280,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
