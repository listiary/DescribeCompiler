//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe10.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe10Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, TAG=3, LINK=4, DECORATOR=5, HYPHEN=6, 
		PRODUCTION_ARROW=7, RIGHT_ARROW=8, LEFT_ARROW=9, SEPARATOR=10, TERMINATOR=11, 
		FORWARD_SLASHES=12, FORWARD_SLASH=13, COMMA=14, SEMICOLON=15, ESCAPE_ESCAPE=16, 
		ESCAPE_HYPHEN=17, ESCAPE_RIGHT_ARROW=18, ESCAPE_LEFT_ARROW=19, ESCAPE_RIGHT_SQUARE=20, 
		ESCAPE_LEFT_SQUARE=21, ESCAPE_RIGHT_CURL=22, ESCAPE_LEFT_CURL=23, ESCAPE_SEPARATOR=24, 
		ESCAPE_TERMINATOR=25, ESCAPE_LCOMMENT=26, ESCAPE_BCOMMENT=27, ESCAPE=28, 
		DATA=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LINE_COMMENT", "BLOCK_COMMENT", "TAG", "LINK", "DECORATOR", "HYPHEN", 
		"PRODUCTION_ARROW", "RIGHT_ARROW", "LEFT_ARROW", "SEPARATOR", "TERMINATOR", 
		"FORWARD_SLASHES", "FORWARD_SLASH", "COMMA", "SEMICOLON", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", 
		"ESCAPE_LEFT_SQUARE", "ESCAPE_RIGHT_CURL", "ESCAPE_LEFT_CURL", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA_CHAR", 
		"DATA"
	};


	public Describe10Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Describe10Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'-'", null, null, null, null, null, 
		"'//'", "'/'", "','", "';'", "'\\\\'", "'\\-'", "'\\>'", "'\\<'", "'\\]'", 
		"'\\['", "'\\}'", "'\\{'", "'\\,'", "'\\;'", "'\\//'", "'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "TAG", "LINK", "DECORATOR", "HYPHEN", 
		"PRODUCTION_ARROW", "RIGHT_ARROW", "LEFT_ARROW", "SEPARATOR", "TERMINATOR", 
		"FORWARD_SLASHES", "FORWARD_SLASH", "COMMA", "SEMICOLON", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", 
		"ESCAPE_LEFT_SQUARE", "ESCAPE_RIGHT_CURL", "ESCAPE_LEFT_CURL", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe10.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe10Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,297,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,5,0,67,8,0,10,0,12,0,70,9,0,1,0,3,0,
		73,8,0,1,0,1,0,5,0,77,8,0,10,0,12,0,80,9,0,1,0,3,0,83,8,0,1,0,1,0,1,1,
		1,1,1,1,1,1,5,1,91,8,1,10,1,12,1,94,9,1,1,1,1,1,1,1,1,1,5,1,100,8,1,10,
		1,12,1,103,9,1,1,1,3,1,106,8,1,1,1,1,1,1,2,1,2,4,2,112,8,2,11,2,12,2,113,
		1,2,1,2,5,2,118,8,2,10,2,12,2,121,9,2,1,3,1,3,5,3,125,8,3,10,3,12,3,128,
		9,3,1,3,1,3,5,3,132,8,3,10,3,12,3,135,9,3,1,4,1,4,5,4,139,8,4,10,4,12,
		4,142,9,4,1,4,1,4,5,4,146,8,4,10,4,12,4,149,9,4,1,5,1,5,1,6,1,6,5,6,155,
		8,6,10,6,12,6,158,9,6,1,6,1,6,5,6,162,8,6,10,6,12,6,165,9,6,1,6,1,6,1,
		6,1,6,5,6,171,8,6,10,6,12,6,174,9,6,3,6,176,8,6,1,7,1,7,5,7,180,8,7,10,
		7,12,7,183,9,7,1,8,1,8,5,8,187,8,8,10,8,12,8,190,9,8,1,9,1,9,5,9,194,8,
		9,10,9,12,9,197,9,9,1,9,1,9,5,9,201,8,9,10,9,12,9,204,9,9,1,9,1,9,1,9,
		1,9,5,9,210,8,9,10,9,12,9,213,9,9,3,9,215,8,9,1,10,1,10,5,10,219,8,10,
		10,10,12,10,222,9,10,1,10,1,10,5,10,226,8,10,10,10,12,10,229,9,10,1,10,
		1,10,1,10,1,10,5,10,235,8,10,10,10,12,10,238,9,10,3,10,240,8,10,1,11,1,
		11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,
		17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,
		21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
		26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,4,29,294,8,29,11,29,12,29,295,
		5,68,92,113,126,140,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
		45,23,47,24,49,25,51,26,53,27,55,28,57,0,59,29,1,0,3,10,0,9,13,32,32,133,
		133,160,160,5760,5760,8192,8202,8232,8233,8239,8239,8287,8287,12288,12288,
		11,0,9,9,11,13,32,32,133,133,160,160,5760,5760,8192,8202,8232,8233,8239,
		8239,8287,8287,12288,12288,8,0,42,42,44,45,47,47,59,60,62,62,91,93,123,
		123,125,125,323,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,86,1,0,0,0,5,109,1,0,
		0,0,7,122,1,0,0,0,9,136,1,0,0,0,11,150,1,0,0,0,13,175,1,0,0,0,15,177,1,
		0,0,0,17,184,1,0,0,0,19,214,1,0,0,0,21,239,1,0,0,0,23,241,1,0,0,0,25,244,
		1,0,0,0,27,246,1,0,0,0,29,248,1,0,0,0,31,250,1,0,0,0,33,253,1,0,0,0,35,
		256,1,0,0,0,37,259,1,0,0,0,39,262,1,0,0,0,41,265,1,0,0,0,43,268,1,0,0,
		0,45,271,1,0,0,0,47,274,1,0,0,0,49,277,1,0,0,0,51,280,1,0,0,0,53,284,1,
		0,0,0,55,288,1,0,0,0,57,290,1,0,0,0,59,293,1,0,0,0,61,62,5,47,0,0,62,63,
		5,47,0,0,63,64,5,32,0,0,64,68,1,0,0,0,65,67,9,0,0,0,66,65,1,0,0,0,67,70,
		1,0,0,0,68,69,1,0,0,0,68,66,1,0,0,0,69,82,1,0,0,0,70,68,1,0,0,0,71,73,
		5,13,0,0,72,71,1,0,0,0,72,73,1,0,0,0,73,74,1,0,0,0,74,78,5,10,0,0,75,77,
		7,0,0,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,83,
		1,0,0,0,80,78,1,0,0,0,81,83,5,0,0,1,82,72,1,0,0,0,82,81,1,0,0,0,83,84,
		1,0,0,0,84,85,6,0,0,0,85,2,1,0,0,0,86,87,5,47,0,0,87,88,5,42,0,0,88,92,
		1,0,0,0,89,91,9,0,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,93,1,0,0,0,92,90,
		1,0,0,0,93,105,1,0,0,0,94,92,1,0,0,0,95,96,5,42,0,0,96,97,5,47,0,0,97,
		101,1,0,0,0,98,100,7,0,0,0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,
		0,101,102,1,0,0,0,102,106,1,0,0,0,103,101,1,0,0,0,104,106,5,0,0,1,105,
		95,1,0,0,0,105,104,1,0,0,0,106,107,1,0,0,0,107,108,6,1,0,0,108,4,1,0,0,
		0,109,111,5,60,0,0,110,112,9,0,0,0,111,110,1,0,0,0,112,113,1,0,0,0,113,
		114,1,0,0,0,113,111,1,0,0,0,114,115,1,0,0,0,115,119,5,62,0,0,116,118,7,
		0,0,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,
		120,6,1,0,0,0,121,119,1,0,0,0,122,126,5,91,0,0,123,125,9,0,0,0,124,123,
		1,0,0,0,125,128,1,0,0,0,126,127,1,0,0,0,126,124,1,0,0,0,127,129,1,0,0,
		0,128,126,1,0,0,0,129,133,5,93,0,0,130,132,7,0,0,0,131,130,1,0,0,0,132,
		135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,8,1,0,0,0,135,133,1,0,
		0,0,136,140,5,123,0,0,137,139,9,0,0,0,138,137,1,0,0,0,139,142,1,0,0,0,
		140,141,1,0,0,0,140,138,1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,0,143,147,
		5,125,0,0,144,146,7,0,0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,
		0,0,147,148,1,0,0,0,148,10,1,0,0,0,149,147,1,0,0,0,150,151,5,45,0,0,151,
		12,1,0,0,0,152,156,5,62,0,0,153,155,7,1,0,0,154,153,1,0,0,0,155,158,1,
		0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,
		159,163,5,10,0,0,160,162,7,0,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,
		1,0,0,0,163,164,1,0,0,0,164,176,1,0,0,0,165,163,1,0,0,0,166,167,5,62,0,
		0,167,168,5,62,0,0,168,172,1,0,0,0,169,171,7,0,0,0,170,169,1,0,0,0,171,
		174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,176,1,0,0,0,174,172,1,
		0,0,0,175,152,1,0,0,0,175,166,1,0,0,0,176,14,1,0,0,0,177,181,5,62,0,0,
		178,180,7,0,0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,
		1,0,0,0,182,16,1,0,0,0,183,181,1,0,0,0,184,188,5,60,0,0,185,187,7,0,0,
		0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,
		18,1,0,0,0,190,188,1,0,0,0,191,195,5,44,0,0,192,194,7,1,0,0,193,192,1,
		0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,198,1,0,0,0,
		197,195,1,0,0,0,198,202,5,10,0,0,199,201,7,0,0,0,200,199,1,0,0,0,201,204,
		1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,215,1,0,0,0,204,202,1,0,0,
		0,205,206,5,44,0,0,206,207,5,44,0,0,207,211,1,0,0,0,208,210,7,0,0,0,209,
		208,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,215,1,
		0,0,0,213,211,1,0,0,0,214,191,1,0,0,0,214,205,1,0,0,0,215,20,1,0,0,0,216,
		220,5,59,0,0,217,219,7,1,0,0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,1,
		0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,220,1,0,0,0,223,227,5,10,0,0,
		224,226,7,0,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,
		1,0,0,0,228,240,1,0,0,0,229,227,1,0,0,0,230,231,5,59,0,0,231,232,5,59,
		0,0,232,236,1,0,0,0,233,235,7,0,0,0,234,233,1,0,0,0,235,238,1,0,0,0,236,
		234,1,0,0,0,236,237,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,239,216,1,
		0,0,0,239,230,1,0,0,0,240,22,1,0,0,0,241,242,5,47,0,0,242,243,5,47,0,0,
		243,24,1,0,0,0,244,245,5,47,0,0,245,26,1,0,0,0,246,247,5,44,0,0,247,28,
		1,0,0,0,248,249,5,59,0,0,249,30,1,0,0,0,250,251,5,92,0,0,251,252,5,92,
		0,0,252,32,1,0,0,0,253,254,5,92,0,0,254,255,5,45,0,0,255,34,1,0,0,0,256,
		257,5,92,0,0,257,258,5,62,0,0,258,36,1,0,0,0,259,260,5,92,0,0,260,261,
		5,60,0,0,261,38,1,0,0,0,262,263,5,92,0,0,263,264,5,93,0,0,264,40,1,0,0,
		0,265,266,5,92,0,0,266,267,5,91,0,0,267,42,1,0,0,0,268,269,5,92,0,0,269,
		270,5,125,0,0,270,44,1,0,0,0,271,272,5,92,0,0,272,273,5,123,0,0,273,46,
		1,0,0,0,274,275,5,92,0,0,275,276,5,44,0,0,276,48,1,0,0,0,277,278,5,92,
		0,0,278,279,5,59,0,0,279,50,1,0,0,0,280,281,5,92,0,0,281,282,5,47,0,0,
		282,283,5,47,0,0,283,52,1,0,0,0,284,285,5,92,0,0,285,286,5,47,0,0,286,
		287,5,42,0,0,287,54,1,0,0,0,288,289,5,92,0,0,289,56,1,0,0,0,290,291,8,
		2,0,0,291,58,1,0,0,0,292,294,3,57,28,0,293,292,1,0,0,0,294,295,1,0,0,0,
		295,293,1,0,0,0,295,296,1,0,0,0,296,60,1,0,0,0,29,0,68,72,78,82,92,101,
		105,113,119,126,133,140,147,156,163,172,175,181,188,195,202,211,214,220,
		227,236,239,295,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
