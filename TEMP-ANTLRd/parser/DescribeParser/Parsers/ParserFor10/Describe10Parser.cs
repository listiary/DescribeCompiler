//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Describe10.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Describe10Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, LINK=3, DECORATOR=4, HYPHEN=5, PRODUCTION_ARROW=6, 
		RIGHT_ARROW=7, LEFT_ARROW=8, SEPARATOR=9, TERMINATOR=10, FORWARD_SLASHES=11, 
		FORWARD_SLASH=12, COMMA=13, SEMICOLON=14, ESCAPE_ESCAPE=15, ESCAPE_HYPHEN=16, 
		ESCAPE_RIGHT_ARROW=17, ESCAPE_LEFT_ARROW=18, ESCAPE_RIGHT_SQUARE=19, ESCAPE_LEFT_SQUARE=20, 
		ESCAPE_RIGHT_CURL=21, ESCAPE_LEFT_CURL=22, ESCAPE_SEPARATOR=23, ESCAPE_TERMINATOR=24, 
		ESCAPE_LCOMMENT=25, ESCAPE_BCOMMENT=26, ESCAPE=27, DATA=28;
	public const int
		RULE_producer = 0, RULE_text_chunk = 1, RULE_tag = 2, RULE_item = 3, RULE_expression = 4, 
		RULE_item_or_expression_part = 5, RULE_item_or_expression_list = 6, RULE_expression_list = 7, 
		RULE_scripture = 8;
	public static readonly string[] ruleNames = {
		"producer", "text_chunk", "tag", "item", "expression", "item_or_expression_part", 
		"item_or_expression_list", "expression_list", "scripture"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'-'", null, null, null, null, null, "'//'", 
		"'/'", "','", "';'", "'\\\\'", "'\\-'", "'\\>'", "'\\<'", "'\\]'", "'\\['", 
		"'\\}'", "'\\{'", "'\\,'", "'\\;'", "'\\//'", "'\\/*'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "LINK", "DECORATOR", "HYPHEN", 
		"PRODUCTION_ARROW", "RIGHT_ARROW", "LEFT_ARROW", "SEPARATOR", "TERMINATOR", 
		"FORWARD_SLASHES", "FORWARD_SLASH", "COMMA", "SEMICOLON", "ESCAPE_ESCAPE", 
		"ESCAPE_HYPHEN", "ESCAPE_RIGHT_ARROW", "ESCAPE_LEFT_ARROW", "ESCAPE_RIGHT_SQUARE", 
		"ESCAPE_LEFT_SQUARE", "ESCAPE_RIGHT_CURL", "ESCAPE_LEFT_CURL", "ESCAPE_SEPARATOR", 
		"ESCAPE_TERMINATOR", "ESCAPE_LCOMMENT", "ESCAPE_BCOMMENT", "ESCAPE", "DATA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Describe10.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Describe10Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Describe10Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Describe10Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProducerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe10Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRODUCTION_ARROW() { return GetToken(Describe10Parser.PRODUCTION_ARROW, 0); }
		public ProducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_producer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.EnterProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.ExitProducer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe10Visitor<TResult> typedVisitor = visitor as IDescribe10Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProducer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProducerContext producer() {
		ProducerContext _localctx = new ProducerContext(Context, State);
		EnterRule(_localctx, 0, RULE_producer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			Match(HYPHEN);
			State = 19;
			Match(PRODUCTION_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Text_chunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_ESCAPE() { return GetToken(Describe10Parser.ESCAPE_ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_HYPHEN() { return GetToken(Describe10Parser.ESCAPE_HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_ARROW() { return GetToken(Describe10Parser.ESCAPE_RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_ARROW() { return GetToken(Describe10Parser.ESCAPE_LEFT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_SQUARE() { return GetToken(Describe10Parser.ESCAPE_RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_SQUARE() { return GetToken(Describe10Parser.ESCAPE_LEFT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_RIGHT_CURL() { return GetToken(Describe10Parser.ESCAPE_RIGHT_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LEFT_CURL() { return GetToken(Describe10Parser.ESCAPE_LEFT_CURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SEPARATOR() { return GetToken(Describe10Parser.ESCAPE_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_TERMINATOR() { return GetToken(Describe10Parser.ESCAPE_TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_LCOMMENT() { return GetToken(Describe10Parser.ESCAPE_LCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_BCOMMENT() { return GetToken(Describe10Parser.ESCAPE_BCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(Describe10Parser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Describe10Parser.HYPHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Describe10Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(Describe10Parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe10Parser.RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASHES() { return GetToken(Describe10Parser.FORWARD_SLASHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASH() { return GetToken(Describe10Parser.FORWARD_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(Describe10Parser.DATA, 0); }
		public Text_chunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.EnterText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.ExitText_chunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe10Visitor<TResult> typedVisitor = visitor as IDescribe10Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText_chunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Text_chunkContext text_chunk() {
		Text_chunkContext _localctx = new Text_chunkContext(Context, State);
		EnterRule(_localctx, 2, RULE_text_chunk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ARROW() { return GetToken(Describe10Parser.LEFT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ARROW() { return GetToken(Describe10Parser.RIGHT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRODUCTION_ARROW() { return GetToken(Describe10Parser.PRODUCTION_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DATA() { return GetTokens(Describe10Parser.DATA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA(int i) {
			return GetToken(Describe10Parser.DATA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HYPHEN() { return GetTokens(Describe10Parser.HYPHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN(int i) {
			return GetToken(Describe10Parser.HYPHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARD_SLASH() { return GetTokens(Describe10Parser.FORWARD_SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASH(int i) {
			return GetToken(Describe10Parser.FORWARD_SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORWARD_SLASHES() { return GetTokens(Describe10Parser.FORWARD_SLASHES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_SLASHES(int i) {
			return GetToken(Describe10Parser.FORWARD_SLASHES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE() { return GetTokens(Describe10Parser.ESCAPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE(int i) {
			return GetToken(Describe10Parser.ESCAPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_ESCAPE() { return GetTokens(Describe10Parser.ESCAPE_ESCAPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_ESCAPE(int i) {
			return GetToken(Describe10Parser.ESCAPE_ESCAPE, i);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe10Visitor<TResult> typedVisitor = visitor as IDescribe10Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 4, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			Match(LEFT_ARROW);
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 24;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 402692128L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 402692128L) != 0) );
			State = 29;
			_la = TokenStream.LA(1);
			if ( !(_la==PRODUCTION_ARROW || _la==RIGHT_ARROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext[] text_chunk() {
			return GetRuleContexts<Text_chunkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Text_chunkContext text_chunk(int i) {
			return GetRuleContext<Text_chunkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINK() { return GetTokens(Describe10Parser.LINK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINK(int i) {
			return GetToken(Describe10Parser.LINK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECORATOR() { return GetTokens(Describe10Parser.DECORATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECORATOR(int i) {
			return GetToken(Describe10Parser.DECORATOR, i);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe10Visitor<TResult> typedVisitor = visitor as IDescribe10Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 6, RULE_item);
		int _la;
		try {
			int _alt;
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 31;
						text_chunk();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 34;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_ARROW) {
					{
					State = 36;
					tag();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 39;
					text_chunk();
					}
					}
					State = 42;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 44;
					Match(LINK);
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 49;
					text_chunk();
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 54;
					Match(DECORATOR);
					}
					}
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 59;
					text_chunk();
					}
					}
					State = 62;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 64;
					Match(LINK);
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 69;
				tag();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 71;
					text_chunk();
					}
					}
					State = 74;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 76;
				tag();
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 77;
					Match(LINK);
					}
					}
					State = 80;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 82;
					text_chunk();
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 87;
					Match(DECORATOR);
					}
					}
					State = 90;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 92;
				tag();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 94;
					text_chunk();
					}
					}
					State = 97;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 99;
				tag();
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 100;
					Match(DECORATOR);
					}
					}
					State = 103;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 105;
					text_chunk();
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 110;
					Match(DECORATOR);
					}
					}
					State = 113;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 115;
					Match(LINK);
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 120;
					text_chunk();
					}
					}
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 125;
					Match(LINK);
					}
					}
					State = 128;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 130;
					Match(DECORATOR);
					}
					}
					State = 133;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 135;
					text_chunk();
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 140;
				tag();
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 141;
					Match(DECORATOR);
					}
					}
					State = 144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 146;
					Match(LINK);
					}
					}
					State = 149;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 151;
					text_chunk();
					}
					}
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 156;
					Match(DECORATOR);
					}
					}
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 161;
				tag();
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 162;
					Match(LINK);
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 167;
					text_chunk();
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 172;
					Match(DECORATOR);
					}
					}
					State = 175;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 177;
					Match(LINK);
					}
					}
					State = 180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 182;
				tag();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 184;
					text_chunk();
					}
					}
					State = 187;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 189;
				tag();
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 190;
					Match(LINK);
					}
					}
					State = 193;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 195;
					Match(DECORATOR);
					}
					}
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 200;
					text_chunk();
					}
					}
					State = 203;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 205;
					Match(LINK);
					}
					}
					State = 208;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 210;
				tag();
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 211;
					Match(DECORATOR);
					}
					}
					State = 214;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 216;
					text_chunk();
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 536869024L) != 0) );
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 221;
					Match(LINK);
					}
					}
					State = 224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINK );
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 226;
					Match(DECORATOR);
					}
					}
					State = 229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DECORATOR );
				State = 231;
				tag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProducerContext producer() {
			return GetRuleContext<ProducerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_listContext item_or_expression_list() {
			return GetRuleContext<Item_or_expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATOR() { return GetToken(Describe10Parser.TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe10Visitor<TResult> typedVisitor = visitor as IDescribe10Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_expression);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				item();
				State = 236;
				producer();
				State = 237;
				item_or_expression_list();
				State = 238;
				Match(TERMINATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240;
				item();
				State = 241;
				producer();
				State = 242;
				item();
				State = 243;
				Match(TERMINATOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245;
				item();
				State = 246;
				producer();
				State = 247;
				expression();
				State = 248;
				Match(TERMINATOR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 250;
				item();
				State = 251;
				producer();
				State = 252;
				Match(TERMINATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(Describe10Parser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe10Visitor<TResult> typedVisitor = visitor as IDescribe10Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_partContext item_or_expression_part() {
		Item_or_expression_partContext _localctx = new Item_or_expression_partContext(Context, State);
		EnterRule(_localctx, 10, RULE_item_or_expression_part);
		int _la;
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				item();
				State = 257;
				Match(SEPARATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				expression();
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 260;
					Match(SEPARATOR);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_or_expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext[] item_or_expression_part() {
			return GetRuleContexts<Item_or_expression_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Item_or_expression_partContext item_or_expression_part(int i) {
			return GetRuleContext<Item_or_expression_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Item_or_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_or_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.EnterItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.ExitItem_or_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe10Visitor<TResult> typedVisitor = visitor as IDescribe10Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_or_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_or_expression_listContext item_or_expression_list() {
		Item_or_expression_listContext _localctx = new Item_or_expression_listContext(Context, State);
		EnterRule(_localctx, 12, RULE_item_or_expression_list);
		try {
			int _alt;
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 265;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 268;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 270;
				item();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 272;
						item_or_expression_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 275;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 277;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe10Visitor<TResult> typedVisitor = visitor as IDescribe10Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_expression_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 281;
					expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 286;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Describe10Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scripture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.EnterScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDescribe10Listener typedListener = listener as IDescribe10Listener;
			if (typedListener != null) typedListener.ExitScripture(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDescribe10Visitor<TResult> typedVisitor = visitor as IDescribe10Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScripture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptureContext scripture() {
		ScriptureContext _localctx = new ScriptureContext(Context, State);
		EnterRule(_localctx, 16, RULE_scripture);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288;
				expression_list();
				State = 289;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291;
				expression();
				State = 292;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,28,297,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,1,0,1,0,1,1,1,1,1,2,1,2,4,2,26,8,2,11,2,12,2,27,1,2,1,
		2,1,3,4,3,33,8,3,11,3,12,3,34,1,3,3,3,38,8,3,1,3,4,3,41,8,3,11,3,12,3,
		42,1,3,4,3,46,8,3,11,3,12,3,47,1,3,4,3,51,8,3,11,3,12,3,52,1,3,4,3,56,
		8,3,11,3,12,3,57,1,3,4,3,61,8,3,11,3,12,3,62,1,3,4,3,66,8,3,11,3,12,3,
		67,1,3,1,3,1,3,4,3,73,8,3,11,3,12,3,74,1,3,1,3,4,3,79,8,3,11,3,12,3,80,
		1,3,4,3,84,8,3,11,3,12,3,85,1,3,4,3,89,8,3,11,3,12,3,90,1,3,1,3,1,3,4,
		3,96,8,3,11,3,12,3,97,1,3,1,3,4,3,102,8,3,11,3,12,3,103,1,3,4,3,107,8,
		3,11,3,12,3,108,1,3,4,3,112,8,3,11,3,12,3,113,1,3,4,3,117,8,3,11,3,12,
		3,118,1,3,4,3,122,8,3,11,3,12,3,123,1,3,4,3,127,8,3,11,3,12,3,128,1,3,
		4,3,132,8,3,11,3,12,3,133,1,3,4,3,137,8,3,11,3,12,3,138,1,3,1,3,4,3,143,
		8,3,11,3,12,3,144,1,3,4,3,148,8,3,11,3,12,3,149,1,3,4,3,153,8,3,11,3,12,
		3,154,1,3,4,3,158,8,3,11,3,12,3,159,1,3,1,3,4,3,164,8,3,11,3,12,3,165,
		1,3,4,3,169,8,3,11,3,12,3,170,1,3,4,3,174,8,3,11,3,12,3,175,1,3,4,3,179,
		8,3,11,3,12,3,180,1,3,1,3,1,3,4,3,186,8,3,11,3,12,3,187,1,3,1,3,4,3,192,
		8,3,11,3,12,3,193,1,3,4,3,197,8,3,11,3,12,3,198,1,3,4,3,202,8,3,11,3,12,
		3,203,1,3,4,3,207,8,3,11,3,12,3,208,1,3,1,3,4,3,213,8,3,11,3,12,3,214,
		1,3,4,3,218,8,3,11,3,12,3,219,1,3,4,3,223,8,3,11,3,12,3,224,1,3,4,3,228,
		8,3,11,3,12,3,229,1,3,1,3,3,3,234,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,255,8,4,1,5,1,5,1,5,1,
		5,1,5,3,5,262,8,5,3,5,264,8,5,1,6,4,6,267,8,6,11,6,12,6,268,1,6,1,6,1,
		6,4,6,274,8,6,11,6,12,6,275,1,6,1,6,3,6,280,8,6,1,7,4,7,283,8,7,11,7,12,
		7,284,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,295,8,8,1,8,0,0,9,0,2,4,6,8,
		10,12,14,16,0,3,3,0,5,5,7,7,11,28,4,0,5,5,11,12,15,15,27,28,1,0,6,7,350,
		0,18,1,0,0,0,2,21,1,0,0,0,4,23,1,0,0,0,6,233,1,0,0,0,8,254,1,0,0,0,10,
		263,1,0,0,0,12,279,1,0,0,0,14,282,1,0,0,0,16,294,1,0,0,0,18,19,5,5,0,0,
		19,20,5,6,0,0,20,1,1,0,0,0,21,22,7,0,0,0,22,3,1,0,0,0,23,25,5,8,0,0,24,
		26,7,1,0,0,25,24,1,0,0,0,26,27,1,0,0,0,27,25,1,0,0,0,27,28,1,0,0,0,28,
		29,1,0,0,0,29,30,7,2,0,0,30,5,1,0,0,0,31,33,3,2,1,0,32,31,1,0,0,0,33,34,
		1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,37,1,0,0,0,36,38,3,4,2,0,37,36,
		1,0,0,0,37,38,1,0,0,0,38,234,1,0,0,0,39,41,3,2,1,0,40,39,1,0,0,0,41,42,
		1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,45,1,0,0,0,44,46,5,3,0,0,45,44,
		1,0,0,0,46,47,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,234,1,0,0,0,49,51,
		3,2,1,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,55,
		1,0,0,0,54,56,5,4,0,0,55,54,1,0,0,0,56,57,1,0,0,0,57,55,1,0,0,0,57,58,
		1,0,0,0,58,234,1,0,0,0,59,61,3,2,1,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,
		1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,66,5,3,0,0,65,64,1,0,0,0,66,67,
		1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,69,1,0,0,0,69,70,3,4,2,0,70,234,
		1,0,0,0,71,73,3,2,1,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,0,74,75,
		1,0,0,0,75,76,1,0,0,0,76,78,3,4,2,0,77,79,5,3,0,0,78,77,1,0,0,0,79,80,
		1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,234,1,0,0,0,82,84,3,2,1,0,83,82,
		1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,88,1,0,0,0,87,89,
		5,4,0,0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,92,
		1,0,0,0,92,93,3,4,2,0,93,234,1,0,0,0,94,96,3,2,1,0,95,94,1,0,0,0,96,97,
		1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,101,3,4,2,0,100,102,
		5,4,0,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,
		0,104,234,1,0,0,0,105,107,3,2,1,0,106,105,1,0,0,0,107,108,1,0,0,0,108,
		106,1,0,0,0,108,109,1,0,0,0,109,111,1,0,0,0,110,112,5,4,0,0,111,110,1,
		0,0,0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,116,1,0,0,0,
		115,117,5,3,0,0,116,115,1,0,0,0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,
		1,0,0,0,119,234,1,0,0,0,120,122,3,2,1,0,121,120,1,0,0,0,122,123,1,0,0,
		0,123,121,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,127,5,3,0,0,126,
		125,1,0,0,0,127,128,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,131,1,
		0,0,0,130,132,5,4,0,0,131,130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,0,0,
		133,134,1,0,0,0,134,234,1,0,0,0,135,137,3,2,1,0,136,135,1,0,0,0,137,138,
		1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,142,3,4,2,
		0,141,143,5,4,0,0,142,141,1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,
		145,1,0,0,0,145,147,1,0,0,0,146,148,5,3,0,0,147,146,1,0,0,0,148,149,1,
		0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,234,1,0,0,0,151,153,3,2,1,0,
		152,151,1,0,0,0,153,154,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,157,
		1,0,0,0,156,158,5,4,0,0,157,156,1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,
		0,159,160,1,0,0,0,160,161,1,0,0,0,161,163,3,4,2,0,162,164,5,3,0,0,163,
		162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,234,1,
		0,0,0,167,169,3,2,1,0,168,167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,
		170,171,1,0,0,0,171,173,1,0,0,0,172,174,5,4,0,0,173,172,1,0,0,0,174,175,
		1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,179,5,3,0,
		0,178,177,1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,
		182,1,0,0,0,182,183,3,4,2,0,183,234,1,0,0,0,184,186,3,2,1,0,185,184,1,
		0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,
		189,191,3,4,2,0,190,192,5,3,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,
		1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,197,5,4,0,0,196,195,1,0,0,
		0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,234,1,0,0,0,200,
		202,3,2,1,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,204,1,
		0,0,0,204,206,1,0,0,0,205,207,5,3,0,0,206,205,1,0,0,0,207,208,1,0,0,0,
		208,206,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,212,3,4,2,0,211,213,
		5,4,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,
		0,215,234,1,0,0,0,216,218,3,2,1,0,217,216,1,0,0,0,218,219,1,0,0,0,219,
		217,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,223,5,3,0,0,222,221,1,
		0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,
		226,228,5,4,0,0,227,226,1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,
		1,0,0,0,230,231,1,0,0,0,231,232,3,4,2,0,232,234,1,0,0,0,233,32,1,0,0,0,
		233,40,1,0,0,0,233,50,1,0,0,0,233,60,1,0,0,0,233,72,1,0,0,0,233,83,1,0,
		0,0,233,95,1,0,0,0,233,106,1,0,0,0,233,121,1,0,0,0,233,136,1,0,0,0,233,
		152,1,0,0,0,233,168,1,0,0,0,233,185,1,0,0,0,233,201,1,0,0,0,233,217,1,
		0,0,0,234,7,1,0,0,0,235,236,3,6,3,0,236,237,3,0,0,0,237,238,3,12,6,0,238,
		239,5,10,0,0,239,255,1,0,0,0,240,241,3,6,3,0,241,242,3,0,0,0,242,243,3,
		6,3,0,243,244,5,10,0,0,244,255,1,0,0,0,245,246,3,6,3,0,246,247,3,0,0,0,
		247,248,3,8,4,0,248,249,5,10,0,0,249,255,1,0,0,0,250,251,3,6,3,0,251,252,
		3,0,0,0,252,253,5,10,0,0,253,255,1,0,0,0,254,235,1,0,0,0,254,240,1,0,0,
		0,254,245,1,0,0,0,254,250,1,0,0,0,255,9,1,0,0,0,256,257,3,6,3,0,257,258,
		5,9,0,0,258,264,1,0,0,0,259,261,3,8,4,0,260,262,5,9,0,0,261,260,1,0,0,
		0,261,262,1,0,0,0,262,264,1,0,0,0,263,256,1,0,0,0,263,259,1,0,0,0,264,
		11,1,0,0,0,265,267,3,10,5,0,266,265,1,0,0,0,267,268,1,0,0,0,268,266,1,
		0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,3,6,3,0,271,280,1,0,0,0,
		272,274,3,10,5,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,
		1,0,0,0,276,277,1,0,0,0,277,278,3,8,4,0,278,280,1,0,0,0,279,266,1,0,0,
		0,279,273,1,0,0,0,280,13,1,0,0,0,281,283,3,8,4,0,282,281,1,0,0,0,283,284,
		1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,287,3,8,4,
		0,287,15,1,0,0,0,288,289,3,14,7,0,289,290,5,0,0,1,290,295,1,0,0,0,291,
		292,3,8,4,0,292,293,5,0,0,1,293,295,1,0,0,0,294,288,1,0,0,0,294,291,1,
		0,0,0,295,17,1,0,0,0,48,27,34,37,42,47,52,57,62,67,74,80,85,90,97,103,
		108,113,118,123,128,133,138,144,149,154,159,165,170,175,180,187,193,198,
		203,208,214,219,224,229,233,254,261,263,268,275,279,284,294
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
